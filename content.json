{"meta":{"title":"XP_WW","subtitle":"苏禾","description":"这是苏禾的个人博客网站","author":"苏禾","url":"https://xp_ww.gitee.io","root":"/"},"pages":[{"title":"关于","date":"2023-09-27T10:58:04.000Z","updated":"2023-10-01T02:31:16.860Z","comments":false,"path":"about/index.html","permalink":"https://xp_ww.gitee.io/about/index.html","excerpt":"","text":"👏👏👏大家好!!!💻💻💻我是不会盲敲键盘的小小小…码农，笔名苏禾，双非本科大学软件工程专业在读学生已学技术栈： JavaSE MySQL Spring SpringMVC MyBatis SpringBoot SpringSecurity JWT 热衷于后端，但是样样不精通😭😭😭 近来，闲来无事，写个博客玩玩，哈哈哈哈"}],"posts":[{"title":"nginx实验六","slug":"nginx实验六","date":"2023-10-21T12:06:34.000Z","updated":"2023-10-21T15:00:34.293Z","comments":true,"path":"blog/717359158.html","link":"","permalink":"https://xp_ww.gitee.io/blog/717359158.html","excerpt":"","text":"调试输出（1）采用命令下载第三方模块echo-nginx-modulewget https://github.com/openresty/echo-nginx-module/archive/v0.60.tar.gz （2）采用命令解压缩v0.60.tar.gz和nginx-1.10.3.tar.gztar -zxvf v0.60.tar.gz tar -zxvf nginx-1.10.3.tar.gz （3）采用命令将echo-nginx-module-0.60移至echo-nginx-module目录。mv echo-nginx-module-0.60 echo-nginx-module （4）采用命令进入目录nginx-1.10.3cd nginx-1.10.3 （5）执行命令生成makefile，并且添加echo-nginx-module模块./configure --prefix=/usr/local/nginx --with-http_ssl_module --add-module=/root/echo-nginx-module （6）执行命令生成可执行的二进制文件​ make &amp;&amp; make install （7）采用命令备份原来的nginx可执行的二进制文件cd objs #备份原来的nginx执行文件 mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak （8）采用命令将新编译的nginx可执行的二进制文件复制到nginx的安装目录sbincp nginx /usr/local/nginx/sbin/nginx （9）修改nginx的主配置文件location / &#123; root html; index index.html index.htm; default_type text_plain; echo \"This is an echo module.\"; &#125; （10）采用命令重新启动nginxcd /usr/local/nginx/sbin/ ./nginx -s reload （11）打开浏览器进行测试，如果成功看到如下表示成功：This is an echo module. 网页压缩传输（1）准备好一个js及CSS文件touch index.js index.css （2）修改index.html，引入js、CSS文件vim index.html &lt;link rel=\"stylesheet\" href=\"index.css\"> &lt;script src=\"index.js\">&lt;/script> （3）打开nginx的主配置文件，添加如下两行代码，启用gzip模块gzip on; gzip_types text/plain application/javascript text/css; （4）打开浏览器，按F12键打开开发者模式，若成功看到Content-Encoding:gzip表示成功启用网页压缩传输。F12–&gt;network–&gt;Headers–&gt;ResponseHeaders 基于rewrite的重写（１）打开nginx的主配置的主配置文件，注释掉原来的默认虚拟主机。（２）添加名为www.xp.com的虚拟主机server &#123; listen 80; server_name www.xp.com; index index.html index.htm; root html; if (!-e $request_filename) &#123; rewrite \"^/.*\" /xp-default/default.html break; &#125; &#125; （３）在html目录下创建一名为xp-default的目录cd /usr/local/nginx/html mkdir xp-default cd xp-default （４）采用命令创建一测试页面echo \"Welcome to the default html.&lt;br>Xu Pan.\" > default.html （５）重启nginx后，打开浏览器，访问一个不存在的页面并查看结果Welcome to the default html. Xu Pan. 基于rewrite的重定向（１）打开nginx的主配置的主配置文件，添加名为www.xp.net的虚拟主机：server &#123; listen 80; server_name www.xp.net; root html; set $name $1; rewrite ^/img-([0-9]+).jpg$ /img/$name.jpg permanent; &#125; （２）在html目录下创建一名为www.xp.net的目录，再在此目录下创建的一个img目录cd /usr/local/nginx/html mkdir www.xp.net cd www.xp.net mkdir img （３）上传２张图片至img目录，图片名称为1.jpg，2.jpg（４）重启启动nginxcd /usr/local/nginx/sbin ./nginx -s reload （５）打开浏览器，输入http://www.xp.net/img-1.jpg进行测试，若能够成功看到相应的图片，表示重定向配置成功。 （６）继续上传3.png、4.png （７）打开浏览器，输入http://www.xp.net/img-1.png进行测试，并记录下测试结果。 （８）修改配置文件，使得png、bmp、gif图像也能够重定向，并写出相应的命令。","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"}]},{"title":"nginx实验五","slug":"nginx实验五","date":"2023-10-15T12:57:04.000Z","updated":"2023-10-21T12:36:14.262Z","comments":true,"path":"blog/752599093.html","link":"","permalink":"https://xp_ww.gitee.io/blog/752599093.html","excerpt":"","text":"一：编写shell实现Nginx的编译安装及开机启动(1)：编写服务脚本实现Nginx服务管理（nginx.sh)#! /bin/bash #chkconfig: 35 85 15 DAEMON=/usr/local/nginx/sbin/nginx case \"$1”in \"\") echo \"Start nginx. . .\" $DAEMON &amp;&amp; echo \" Success\" ;; start) echo \"Start nginx. . .\" $DAEMON &amp;&amp; echo \"Success\" ;; stop) echo \"Stop nginx. . .\" $DAEMON -s quit &amp;&amp; echo \" Success\" ;; reload) echo \"Reload nginx. ..\" $DAEMON -s reload &amp;&amp; echo \" Success\" ;; restart) echo \"Restart nginx. . .\" $DAEMON -s quit $DAEMON &amp;&amp; echo \" Success\" ;; *) echo \"service nginx start or stop or restart or reload\" exit 2 ;; esac （2）编写脚本实现Nginx的编译安装（install_nginx.sh）#! /bin/bash if [ ! -f \"CentOS-Base.repo\" -o ! -f \"epel.repo\" ]; then echo \"Without CentOs-Base.repo or epel.repo in current directory\" exit 2 else mkdir /etc/ yum. repos.d/bak mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak mv *.repo /etc/yum.repos.d fi yum -y install pcre-devel openssl -devel yum -y install gcc gcc-c++ if [ ! -f \"nginx-1.10.3.tar.gz\" ];then echo \"Without Nginx installation package in current directory\" exit 2 else tar -zxvf nginx-1.10.3.tar.gz cd nginx-1.10.3 ./configure --prefix=/usr/local/nginx --with-http_ssl_module make &amp;&amp; make install cd .. mv nginx.sh /etc/init.d/nginx chmod +x /etc/init.d/nginx chkconfig --add nginx systemctl nginx start ps aux | grep nginx firewall-cmd --zone=public --add-port=80/tcp --permanent systemctl restart firewalld rm -f -r nginx-1.10.3 rm -f nginx-1.10.3.tar.gz fi （3）将nginx-1.10.3.tar.gz CentOS-Base.repo epel.repo nginx.sh上传/root目录（4）执行install_nginx.sh#给install_nginx.sh加上可执行权限 chmod +x install_nginx.sh #运行 ./install_nginx.sh 二：轮询负载均衡（1)用命令设置好三台虚拟机的IP、子网掩码、网关和DNS1#根据自己虚拟机实际情况来设置，下面仅作参考 vim /etc/sysconfig/network-scripts/ifcfg-ens33 #第一台 BOOTPROTO=static IPADDR=192.168.37.4 NETMASK=255.255.255.0 GATEWAY=192.168.37.2 DNS1=192.168.37.2 #第二台 BOOTPROTO=static IPADDR=192.168.37.5 NETMASK=255.255.255.0 GATEWAY=192.168.37.2 DNS1=192.168.37.2 #第三台 BOOTPROTO=static IPADDR=192.168.37.6 NETMASK=255.255.255.0 GATEWAY=192.168.37.2 DNS1=192.168.37.2 （2）按一步骤上传文件到三台服务器的&#x2F;root目录，执行./install_nginx.sh编译安装Nginx（3）Windows浏览器上测试3台服务器，如果能够正常访问，继续，否则寻找原因。（4）修改192.168.66.4上的Nginx主配置文件，注释掉原有的server块，添加如下server块：vim /usr/local/nginx/conf/nginx.conf server &#123; listen 80; server_name www.load-balance.com; location / &#123; proxy_pass http://web_server; &#125; &#125; #下面内容放在http模块里面而不是server里面 upstream web_server &#123; server 192.168.37.5; server 192.168.37.6; &#125; （5）在192.168.37.5添加包含如下内容的index.html的页面&lt;h1>Welcome to 192.168.37.5! XuPan.&lt;/h1> （6）在192.168.37.6添加包含如下内容的index.html的页面&lt;h1>Welcome to 192.168.37.6! XuPan.&lt;/h1> （7）修改hosts文件#修改C:\\Windows\\System32\\drivers\\etc下的hosts文件加入虚拟域名 192.168.37.4 www.load-balance.com （8）用命令重新启动Nginx systemctl restart nginx （9）打开浏览器，输入www.load-balance.com后，多次刷新并观察若交替出现(5)(6)则表示轮询负载均衡配置成功 三：加权轮询负载均衡（1）在服务器192.168.37.4上，注释掉nginx.conf文件中原来的server块和upstream块，添加如下代码：server &#123; listen 80; server_name www.load-balance.com; location / &#123; proxy_pass http://web_server; &#125; &#125; #下面内容放在http模块里面而不是server里面 upstream web_server &#123; server 192.168.37.5 weight=1; server 192.168.37.6 weight=2; &#125; （2）用命令重新启动Nginx （3）打开浏览器，输入www.load-balance.com后，多次刷新并观察。 （4）这种配置和轮询负载均衡的结果有何不同？ weight&#x3D;2的虚拟机出现的机会更大，不再是轮询 四：永久缓存配置（1）用命令设置好两台台虚拟机的IP、子网掩码、网关和DNS1#根据自己虚拟机实际情况来设置，下面仅作参考 vim /etc/sysconfig/network-scripts/ifcfg-ens33 #第一台 BOOTPROTO=static IPADDR=192.168.37.7 NETMASK=255.255.255.0 GATEWAY=192.168.37.2 DNS1=192.168.37.2 #第二台 BOOTPROTO=static IPADDR=192.168.37.8 NETMASK=255.255.255.0 GATEWAY=192.168.37.2 DNS1=192.168.37.2 （2）按一步骤上传文件到两台服务器的&#x2F;root目录，执行./install_nginx.sh编译安装Nginx（3）Windows浏览器上测试3台服务器，如果能够正常访问，继续，否则寻找原因。（4）修改192.168.66.7上的Nginx主配置文件，注释掉原有的server块，添加如下server块。vim /usr/local/nginx/conf/nginx.conf server &#123; listen 80; server_name 192.168.37.7; location / &#123; root cache; proxy_store on; proxy_store_access user:rw group:rw all:rw; proxy_temp_path cache_tmp; proxy_pass http://192.168.37.8; &#125; &#125; （5）在nginx的安装目录创建cache目录#进入nginx的安装目录 cd /usr/local/nginx/ #创建cache目录 mkdir cache （6）用命令将cache目录的所有者改为nobodychown nobody cache （7）用命令赋予nobody对cache目录的读写权限chmod u+rw cache （8）用命令重新启动nginxsystemctl restart nginx （9）修改内容服务器（192.168.66.8）的index.html页面&lt;!DOCTYPE html> &lt;html> &lt;head> &lt;title>Welcome to nginx!&lt;/title> &lt;style> body &#123; width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; &#125; &lt;/style> &lt;/head> &lt;body> &lt;h1>Welcome to nginx!&lt;/h1> &lt;img src=\"nginx.png\"/> &lt;p style=\"color:red;\">Xu Pan &lt;/p> &lt;p>&lt;em>Thank you for using nginx cache&lt;/em>&lt;/p> &lt;/body> &lt;/html> （10）在192.168.66.8的html目录建立2个文件夹，命名为test和test2，将index.html和nginx.png分别复制到test和test2 #进入html目录 cd /usr/local/nginx/html #创建test test2目录 mkdir test test2 #复制到test和test2 cp index.html nginx.png test cp index.html nginx.png test2 （11）在Windows的浏览器上输入http://192.168.66.7/ http://192.168.66.7/test/index.html 访问成功后，再修改配置文件 server &#123; listen 80; server_name 192.168.66.7; location / &#123; root cache; proxy_store on; proxy_store_access user:rw group:rw all:rw; proxy_temp_path cache_tmp; if (!-e $request_filename) &#123; proxy_pass http://192.168.37.8; &#125; &#125; &#125; 重启nginx systemctl restart nginx （12）在Windows的浏览器上输入http://192.168.37.7/test2/index.html（13）查看192.168.66.7的cache目录，若看到下面所示的结果，表示缓存配置成功。[root@xp-centos7e cache]# ls test test2 [root@xp-centos7e cache]# cd test [root@xp-centos7e test]# ls index.html nginx.png [root@xp-centos7e test]# cd .. [root@xp-centos7e cache]# cd test2 [root@xp-centos7e test2]# ls index.html nginx.png 五：临时缓存配置。#配置要求 #域名：www.temp-cache.com #HTTP状态码 缓存时间： 200 30分钟 304 15分钟 301 302 2小时 其它 10分钟 缓存大小为: 256MB，缓存路径为nginx安装目录下的proxy_temp_dir，缓存区名称为cache_XP （1）缓存配置 #代理临时目录 proxy_temp_path /usr/local/nginx/proxy_temp_dir; #Web缓存目录和参数设置 proxy_cache_path /usr/local/nginx/proxy_temp_dir/cache_XP levels=1:2 keys_zone=cache_XP:10m max_size=256m inactive=10m; （2）sever块相关配置 server &#123; listen 80; server_name www.temp-cache.com; #增加两个响应头，用于获知访问的服务器地址与缓存是否成功 add_header X-Via $server_addr; add_header X-Cache $upstream_cache_status; location / &#123; #设置缓存区域名称 proxy_cache cache_XP; #以域名、URI，参数组合成web缓存的key值，Nginx根据Key值哈希 proxy_cache_key $host$uri$is_args$args; #对于不同的HTTP状态码设置不同的缓存时间 proxy_cache_valid 200 30m; proxy_cache_valid 304 15m; proxy_cache_valid 301 302 2h; proxy_cache_valid any 10m; #设置反向代理 proxy_pass http://192.168.37.8; &#125; &#125; （3）测试 浏览器访问 www.temp-cache.com/test/index.html #F12查看页面响应内容 X-Cache: HIT X-Via: 192.168.37.7 表明设置成功","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"}]},{"title":"Docker学习笔记","slug":"Docker","date":"2023-10-14T15:35:53.000Z","updated":"2023-10-16T13:37:18.814Z","comments":true,"path":"blog/4126800539.html","link":"","permalink":"https://xp_ww.gitee.io/blog/4126800539.html","excerpt":"","text":"Docker的学习笔记什么是Docker? Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 安装Docker 安装yum-utils,其提供了yum-config-manager工具,用于配置管理 yum install -y yum-utils 添加Docker下载仓库 #官网仓库，此地址为官方的仓库地址，在国内建议不要用 yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo #国内阿里云仓库 yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 安装 yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin Docker启动 systemctl start docker 启动成功测试 docker version Client: Docker Engine - Community Version: 24.0.6 ...... Server: Docker Engine - Community Engine: Version: 24.0.6 ...... 重启Docker systemctl restart docker 查看Docker状态 systemctl status docker 开机自启动 systemctl enable docker Docker停止 systemctl stop docker 关闭开机自启动 systemctl disable docker Docker镜像相关命令 docker pull 可以将指定镜像从docker hub 拉取到本地 用法 ：docker pull [OPTIONS] NAME[:TAG|@DIGEST] OPTIONS：-q:简化日志输出 docker images 可以查看本地所有镜像资源信息，按创建时间排序 用法：docker images [OPTIONS] [REPOSITORY[:TAG]] OPTIONS：-q:仅显示镜像的Image ID OPTIONS：-f:过滤指定条件的镜像 REPOSITORY TAG IMAGE ID CREATED SIZE 仓库名称 版本号 唯一标识 创建时间 镜像大小 docker search 从docker hub上查看指定名称的镜像 用法：docker search [OPTIONS] TERM OPTIONS：--limit:指定显示结果的数量 docker rmi 删除指定的本地镜像,可以指定多个一次性删除 用法：docker rmi [OPTIONS] IMAGE [IMAGE...] OPTIONS：-f:强制删除，包括已经运行的 镜像通过&lt;repository&gt;:&lt;tag&gt;指定，没有tag，则默认是latest版本 docker save 将一个或多个镜像导出为tar文件 用法：docker save [OPTIONS] IMAGE [IMAGE...] docker load 将一个tar文件导入并加载为一个或多个镜像 用法：docker load [OPTIONS] Docker容器 docker run 创建容器并启动 用法：docker run [OPTIONS] IMAGE [COMMAND] [ARG...] Options: --name string 指定当前容器名称 -it 以交互模式运行容器，且为容器分配一个伪终端 /bin/bash 指定容器启动后需要运行的命令是&#x2F;bin&#x2F;bash -d 以分离模式运行容器 -p 设置容器端口 docekr create 仅创建容器但不启动 用法：docker create [OPTIONS] IMAGE [COMMAND] [ARG...] 与docker run类似，但没有-d选项 exit 退出并停止容器（交互模式） Ctrl + P + Q 退出不停止容器（交互模式） docker ps 查看所有正在运行的容器 用法：docker ps [OPTIONS] Options: -a 查看所有容器，无论运行状态 -q 查看容器ID -l 查看最后创建的容器 -n 查看最后创建的n个容器 docker exec 进入正在运行的容器内部 用法：docker exec [OPTIONS] CONTAINER COMMAND [ARG...]","categories":[{"name":"Docker","slug":"Docker","permalink":"https://xp_ww.gitee.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://xp_ww.gitee.io/tags/Docker/"}]},{"title":"nginx实验四挑战题","slug":"nginx实验四挑战题","date":"2023-10-13T06:07:49.000Z","updated":"2023-10-13T12:26:16.670Z","comments":true,"path":"blog/3016513403.html","link":"","permalink":"https://xp_ww.gitee.io/blog/3016513403.html","excerpt":"","text":"搭建Nginx1.10.3+Tomcat-8.5.94服务器，实现动静分离1.下载JRE https://javadl.oracle.com/webapps/download/AutoDL?BundleId=248763_8c876547113c4e4aab3c868e9e0ec572 2.下载Tomacat https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.94/bin/apache-tomcat-8.5.94.tar.gz 3.用xftp上传到虚拟机 apache-tomcat-8.5.94.tar.gz jre-8u381-linux-x64.tar.gz 4.解压tomcat tar -zxvf apache-tomcat-8.5.94.tar.gz tar -zxvf jre-8u381-linux-x64.tar.gz 5.将解压后的文件移动到/usr/local目录 mv apache-tomcat-8.5.94 /usr/local/tomcat mv jre1.8.0_381 /usr/local/jre 6.将tomcat添加为系统服务 #编辑下面文件 vi /etc/init.d/tomcat #输入以下内容 #! /bin/bash #chkconfig: 345 80 20 export JRE_HOME=/usr/local/jre case \"$1\" in start) sudo -E -u nobody /usr/local/tomcat/bin/startup.sh ;; stop) /usr/local/tomcat/bin/shutdown.sh ;; restart) $0 stop $0 start ;; esac 7.让nobody用户获得Tomcat目录的权限 chown -R nobody:nobody /usr/local/tomcat 8.为tomcat服务脚本文件设置执行权限 chmod +x /etc/init.d/tomcat 9.设置开机自启动 chkconfig --add tomcat 10.启动服务 service tomcat start #当你看到以下内容，则说明启动成功 Using CATALINA_BASE: /usr/local/tomcat Using CATALINA_HOME: /usr/local/tomcat Using CATALINA_TMPDIR: /usr/local/tomcat/temp Using JRE_HOME: /usr/local/jre Using CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar Using CATALINA_OPTS: Tomcat started. 11.防火墙打开8080端口 #开放端口 firewall-cmd --zone=public --add-port=8080/tcp --permanent #重启防火墙 systemctl restart firewalld 12.访问tomcat 浏览器进入ip:8080测试看是否出现tomcat页面 成功：🐂🐂🐂 失败：🐍🐍🐍 13.在nginx.conf中创建虚拟主机，配置如下 server &#123; listen 80; server_name tomcat.xp.test;#切换为自己的域名 root /usr/local/tomcat/webapps/ROOT; index index.html index.jsp index.do; location ~/(WEB-INF|META-INF) &#123; deny all; &#125; location ~ \\.(jsp|do)$ &#123; proxy_pass http://127.0.0.1:8080; proxy_set_header X-Client-IP $remote_addr; &#125; location ~^/(docs|examples)(/.*)*$ &#123; root /usr/local/tomcat/webapps; &#125; &#125; 14.在物理机解析域名 #修改C:\\Windows\\System32\\drivers\\etc下的hosts文件加入虚拟域名 192.168.37.4 tomcat.xp.test 15.进行测试 到物理机浏览器输入tomcat.xp.test/index.jsp(你的域名哦！！！) 看到tomcat页面就成功啦🚁🚁🚁 16.如果报错502,执行下面的命令后重启服务重试 setsebool -P httpd_can_network_connect 1 搭建Nginx+OpenResty-1.11.2.2高性能服务器1.下载openresty-1.11.2.2 https://openresty.org/download/openresty-1.11.2.2.tar.gz 2.上传虚拟机后解压openresty-1.11.2.2.tar.gz tar -zxvf openresty-1.11.2.2.tar.gz 3.安装openresty所需依赖包 yum -y install perl pcre-devel openssl-devel 4.编译安装 #进入openresty-1.11.2.2目录 cd openresty-1.11.2.2 #编译安装 ./configure --prefix=/usr/local/openresty make &amp;&amp; make install 5.进入openresty目录运行openresty内置nginx #进入openresty目录 cd /usr/local/openresty #进入nginx目录 cd nginx #运行 ./nginx 6.开放80端口 #开放端口 firewall-cmd --zone=public --add-port=80/tcp --permanent #重启防火墙 systemctl restart firewalld 7.浏览器输入IP地址访问 Welcome to OpenResty!If you see this page, the OpenResty web platform is successfully installed and working. Further configuration is required. For online documentation and support please refer to openresty.org.Thank you for flying OpenResty. 看到上面内容就成功啦🚁🚁🚁","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"}]},{"title":"nginx实验四","slug":"nginx实验四","date":"2023-10-11T13:55:59.000Z","updated":"2023-10-12T15:56:47.326Z","comments":true,"path":"blog/825860720.html","link":"","permalink":"https://xp_ww.gitee.io/blog/825860720.html","excerpt":"","text":"Nginx+PHP环境搭建👻👻👻1.安装PHP依赖包： yum -y install libxml2-devel openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel 2.安装libmcrypt依赖 yum -y install epel-release yum -y install libmcrypt-devel 3.http://php.net 下载php-5.6.27.tar.gz 4.用命令解压缩，进入php-5.6.27目录 #用该命令解压缩 tar -zxvf php-5.6.27.tar.gz #进入php-5.6.27目录 cd php-5.6.27 5.用./configure *命令生成makefile，可用./configure --help查看帮助 ./configure --prefix=/usr/local/php --enable-fpm --with-zlib --enable-zip --enable-mbstring --with-mcrypt --with-mysql --with-mysqli --with-pdo-mysql --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-curl --with-openssl --with-mhash --enable-bcmath --enable-opcache #看见下面就代表成功 Thank you for using PHP. 6.执行命令编译并安装php make &amp;&amp; make install 7.编写PHP页面，存为index.php &lt;?php echo \"Hello World!\\n\"; echo \"&lt;br>\"; echo \"Xu Pan\\n\"; ?> 8.通过如下命令测试 /usr/local/php/bin/php index.php #见到如下例子就表示运行成功 Hello World! Xu Pan 9.复制PHP-FPM的配置文件 cd /usr/local/php/etc cp php-fpm.conf.default php-fpm.conf 10.启动PHP-FPM #进入root目录下php-5.6.27目录 cd ~/php-5.6.27 cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm #给/etc/init.d/php-fpm加入可执行权限 chmod +x /etc/init.d/php-fpm #添加系统服务 chkconfig --add php-fpm 11.用命令重新启动PHP-FPM，才可以使配置生效。 service php-fpm restart #下面两行结果 Gracefully shutting down php-fpm . done Starting php-fpm done 12.复制php.ini cp php.ini-development /usr/local/php/lib/php.ini 13、14.安装Nginx nginx编译安装在其他文章已经给出 nginx编译安装 - XP_WW (gitee.io) 15.编辑nginx配置文件文件，添加如下配置项： vi /usr/local/nginx/conf/nginx.conf server &#123; listen 80; server_name localhost; location / &#123; root html; index index.php; &#125; location ~ \\.php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi.conf; &#125; &#125; 16.重载nginx配置文件 注意如果安装nginx时是编译安装并且创建了服务脚本可以使用下面方法重载nginx配置文件 systemctl restart nginx 否则 /usr/local/nginx/sbin/nginx -s #平滑启动nginx #或者 /usr/local/nginx/sbin/nginx #直接启动 17.将步骤（7）的测试页面复制到nginx的html目录 cp ~/index.php /usr/local/nginx/html/index.php 18.若未开放80端口，请用如下命令开放80端口 #开放端口 firewall-cmd --zone=public --add-port=80/tcp --permanent #重启防火墙 systemctl restart firewalld 19.浏览器中输入http://192.168.*.*/index.php（虚拟机IP），若看到步骤（7）中的相关信息，恭喜你成功了 🔥🔥🔥🔥🔥 Nginx+Apache+PHP动静分离🤡🤡🤡1.下载apache wget https://downloads.apache.org/httpd/httpd-2.4.57.tar.gz 2.用命令解压缩httpd-2.4.57.tar.gz tar -zxvf httpd-2.4.57.tar.gz 3.下载APR and APR-Util wget https://dlcdn.apache.org/apr/apr-1.7.4.tar.gz wget https://dlcdn.apache.org//apr/apr-util-1.6.3.tar.gz 4.用命令解压APR and APR-Util tar -zxvf apr-1.7.4.tar.gz tar -zxvf apr-util-1.6.3.tar.gz 5.用mv命令将arp-1.7.4移到 httpd-2.4.57/srclib/apr mv apr-1.7.4 httpd-2.4.57/srclib/apr 6.用mv命令将apr-util-1.6.3移到 httpd-2.4.57/srclib/apr-util mv apr-util-1.6.3 httpd-2.4.57/srclib/apr-util 7.安装apache依赖 yum -y install pcre-devel openssl-devel expat-devel 8.生成apache的makefile #进入httpd-2.4.57目录 cd httpd-2.4.57 #生成makefile ./configure --enable-so --enable-deflate --enable-ssl 9.编译安装apache make &amp;&amp; make install 10.建立脚本 vi /etc/init.d/httpd #! /bin/bash #chkconfig: 35 85 15 /usr/local/apache2/bin/apachectl $1 11.采用命令为步骤（10）建立的脚本添加执行权限 chmod +x /etc/init.d/httpd 12.采用命令启动apache service httpd start 注意： 你可能会遇到以下警告： AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using fe80::987b:1cbe:6f72:2bdb%ens33. Set the 'ServerName' directive globally to suppress this message 这个并不影响结果，可以继续往下，如果你想解决，参考下面步骤： vi /usr/local/apache2/conf/httpd.conf #然后把 #ServerName www.example.com:80 改为：ServerName localhost #最后重启apache service httpd restart 13.若未开放80端口，请开放80端口 #开放端口 firewall-cmd --zone=public --add-port=80/tcp --permanent #重启防火墙 systemctl restart firewalld 14.访问测试apache 浏览器输入192.168.*.*（虚拟机IP） 当你看到It works!,恭喜你启动成功🐇🐇🐇 15.找到apache配置文件，取消如下行的注释： vi /usr/local/apache2/conf/httpd.conf #Include conf/extra/httpd-vhosts.conf 16.配置虚拟主机 vi /usr/local/apache2/conf/extra/httpd-vhosts.conf 注释掉默认配置，加入下面内容 &lt;VirtualHost *:80> DocumentRoot \"/usr/local/apache2/htdocs/www.test.com\" ServerName www.test.com ServerAlias test.com &lt;/VirtualHost> 17.在httpd.conf中添加apache对php的支持 vi /usr/local/apache2/conf/httpd.conf 加入下面内容 &lt;FilesMatch \"\\.php$\"> setHandler application/x-httpd-php &lt;/FilesMatch> 18.修改apache的主配置文件，修改如下配置 vi /usr/local/apache2/conf/httpd.conf 查找并修改下面内容 &lt;IfModule dir_module> DirectoryIndex index.html index.php &lt;/IfModule> 19.打开apxs文件 vi /usr/local/apache2/bin/apxs #将第一行 !/replace/with/path/to/perl/interpreter -w #替换为perl的具体路径，比如：#!/usr/bin/perl whereis perl #查看perl的具体路径 20.编译安装php #前面和上文一样 ./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache2/bin/apxs --with-zlib --enable-zip --enable-mbstring --with-mcrypt --with-mysql --with-mysqli --with-pdo-mysql --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-curl --with-openssl --with-mhash --with-bcmath --enable-opcache #看见下面就代表成功 Thank you for using PHP. #最后别忘了 make &amp;&amp; make install #若初次安装PHP,还需要将php.ini复制到php的lib目录中 cd ~/php-5.6.27 cp php.ini-development /usr/local/php/lib/php.ini 21.用命令重新启动apache服务器 service httpd start 22.利用echo命令创建一个简单的index.php页面，保存至apache的htdocs的www.test.com目录下。 echo -e \"&lt;?php\\nphpinfo();\\n?>\" > /usr/local/apache2/htdocs/www.test.com/index.php 23.打开浏览器，输入http://IP/index.php，如果成功看到PHP信息，表示成功搭建apache+PHP环境。 24.将apache的监听端口改为81，修改httpd.conf和httpd-vhosts.conf #1.修改httpd.conf vi /usr/local/apache2/conf/httpd.conf #找到Listen，并修改 Listen 80 ==> Listen 81 #2.修改httpd-vhosts.conf vi /usr/local/apache2/conf/extra/httpd-vhosts.conf &lt;VirtualHost *:80> ==> &lt;VirtualHost *:81> #记得开放端口哦 25.用命令重新启动apache服务器 service httpd restart 26.编译安装nginx1.10.3 nginx编译安装在其他文章已经给出 nginx编译安装 - XP_WW (gitee.io) 27.修改nginx.conf，注释原来的server块，添加如下虚拟主机 server &#123; listen 80; server_name www.test.com; root /usr/local/apache2/htdocs/www.test.com; location ~ \\.php$ &#123; proxy_pass http://127.0.0.1:81; proxy_set_header Host $host; &#125; &#125; 28.重新启动Nginx ./nginx -s reload 29.在/usr/local/apache2/htdocs/www.test.com新建立一个页面index.html，内容如下： &lt;h1>welcome to www.test.com&lt;/h1> &lt;br> &lt;p>This is page created by xupan!&lt;/p> 30.打开浏览器，再次测试，如看到（29）内容，那么 🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"}]},{"title":"nginx实验三","slug":"nginx实验三","date":"2023-10-11T06:11:48.000Z","updated":"2023-10-12T13:45:54.889Z","comments":true,"path":"blog/2112605806.html","link":"","permalink":"https://xp_ww.gitee.io/blog/2112605806.html","excerpt":"","text":"nginx实验挑战题1.配置基于IP的虚拟主机。比如通过http://192.168.37.3/和http://192.168.37.8/可以分别打开不同的网站 #1.配置虚拟主机(基于ip) ifconfig ens33:1 192.168.37.8 #2.修改nginx.conf配置文件 server &#123; listen 192.168.37.8:80;#监听IP和端口 server_name 192.168.37.8; root html/html378; index index.html index.htm; &#125; #3.重启nginx服务 Systemctl restart nginx #4.进入浏览器分别访问192.168.37.3和192.168.37.8 2.配置基于域名的虚拟主机。比如通过http://www.xp.com/和http://www.xp.net/可以分别打开不同的网站 #1.为虚拟机解析域名 vi /etc/hosts 192.168.37.3 www.xp.com www.xp.net #2.修改nginx.conf server &#123; listen 80; server_name www.xp.com; root html/htmlcom; index index.html index.htm; &#125; server &#123; listen 80; server_name www.xp.net; root html/htmlnet; index index.html index.htm; &#125; #3.此时只能在虚拟机本机访问,要想在电脑访问，需要修改C:\\Windows\\System32\\drivers\\etc下的hosts文件加入虚拟域名 192.168.37.3 www.xp.com 192.168.37.3 www.xp.net","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"}]},{"title":"Java八股文之JavaSE--面向对象","slug":"Java八股文之JavaSE","date":"2023-10-09T15:32:55.000Z","updated":"2023-10-14T14:47:01.085Z","comments":true,"path":"blog/1491118462.html","link":"","permalink":"https://xp_ww.gitee.io/blog/1491118462.html","excerpt":"","text":"面向对象1. 什么是面向对象编程？答：面向对象编程是一种程序设计思想，通过将问题抽象成对象，通过对象之间的交互和数据封装来实现程序逻辑。 2. Java中的类和对象有什么区别？答：类是描述对象的模板，对象是类的实例。类定义了对象的属性和行为，而对象则具体拥有这些属性和行为。 3.什么是封装？为什么要使用封装？答：封装是将数据和方法包装在类中，并限制对数据的直接访问。封装可以隐藏内部细节，提供对外部的安全接口，并实现代码的重用和维护。 4.什么是继承？有什么作用？答：继承是指子类继承父类的属性和方法。继承可以实现代码的重用，提高代码的可维护性和可扩展性。 5.java是否继承多继承？答：java不支持多继承，一个类只能继承一个父类。但是Java支持接口的多实现，实现了多继承的效果。 6.什么是多态？如何实现多态？答：多态是同一类型的对象在不同情况下表现出不同的行为。多态可以通过继承和接口的方式实现。 7.什么是抽象类？有什么作用？答：抽象类是不能被实例化的，它只能被继承。抽象类可以包含抽象方法和具体方法的定义，用于作为其他类的父类。","categories":[{"name":"java八股文之JavaSE","slug":"java八股文之JavaSE","permalink":"https://xp_ww.gitee.io/categories/java%E5%85%AB%E8%82%A1%E6%96%87%E4%B9%8BJavaSE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://xp_ww.gitee.io/tags/java/"},{"name":"java八股文","slug":"java八股文","permalink":"https://xp_ww.gitee.io/tags/java%E5%85%AB%E8%82%A1%E6%96%87/"},{"name":"javaSE","slug":"javaSE","permalink":"https://xp_ww.gitee.io/tags/javaSE/"}]},{"title":"项目工具类","slug":"项目工具类","date":"2023-10-02T03:53:20.000Z","updated":"2023-10-11T13:39:51.821Z","comments":true,"path":"blog/617063586.html","link":"","permalink":"https://xp_ww.gitee.io/blog/617063586.html","excerpt":"","text":"本文主要记录写项目的时候经常封装的工具类MD5加密工具 MD5简介：一种被广泛使用的密码散列函数，可以产生一个128位的散列值。MD5算法是不可逆的。 public final class MD5Util &#123; public static String encrypt(String strSrc) &#123; try &#123; char hexChars[] = &#123; '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' &#125;;//十六进制对应字符 byte[] bytes = strSrc.getBytes(); //获得MD5摘要算法的MessageDigest对象 MessageDigest md = MessageDigest.getInstance(\"MD5\"); //使指定的字节更新摘要 md.update(bytes); bytes = md.digest(); int j = bytes.length; char[] chars = new char[j * 2]; int k = 0; for (int i = 0; i &lt; bytes.length; i++) &#123; byte b = bytes[i]; chars[k++] = hexChars[b >>> 4 &amp; 0xf]; chars[k++] = hexChars[b &amp; 0xf]; &#125; return new String(chars); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); throw new RuntimeException(\"MD5加密出错！！+\" + e); &#125; &#125; &#125; 全局统一返回结果工具类 public class Result&lt;T> &#123; // 返回码 private Integer code; // 返回消息 private String message; // 返回数据 private T data; public Result()&#123;&#125; // 返回数据 protected static &lt;T> Result&lt;T> build(T data) &#123; Result&lt;T> result = new Result&lt;T>(); if (data != null) result.setData(data); return result; &#125; public static &lt;T> Result&lt;T> build(T body, Integer code, String message) &#123; Result&lt;T> result = build(body); result.setCode(code); result.setMessage(message); return result; &#125; public static &lt;T> Result&lt;T> build(T body, ResultCodeEnum resultCodeEnum) &#123; Result&lt;T> result = build(body); result.setCode(resultCodeEnum.getCode()); result.setMessage(resultCodeEnum.getMessage()); return result; &#125; /** * 操作成功 * @param data baseCategory1List * @param &lt;T> * @return */ public static&lt;T> Result&lt;T> ok(T data)&#123; Result&lt;T> result = build(data); return build(data, ResultCodeEnum.SUCCESS); &#125; public Result&lt;T> message(String msg)&#123; this.setMessage(msg); return this; &#125; public Result&lt;T> code(Integer code)&#123; this.setCode(code); return this; &#125; public Integer getCode() &#123; return code; &#125; public void setCode(Integer code) &#123; this.code = code; &#125; public String getMessage() &#123; return message; &#125; public void setMessage(String message) &#123; this.message = message; &#125; public T getData() &#123; return data; &#125; public void setData(T data) &#123; this.data = data; &#125; &#125; //统一返回结果状态信息类 public enum ResultCodeEnum &#123; SUCCESS(200,\"success\"), USERNAME_ERROR(501,\"usernameError\"), PASSWORD_ERROR(503,\"passwordError\"), NOTLOGIN(504,\"notLogin\"), USERNAME_USED(505,\"userNameUsed\"); private Integer code; private String message; private ResultCodeEnum(Integer code, String message) &#123; this.code = code; this.message = message; &#125; public Integer getCode() &#123; return code; &#125; public String getMessage() &#123; return message; &#125; &#125; Jwt工具类 @Data @Component @ConfigurationProperties(prefix = \"jwt.token\")//从application.yml中获取 public class JwtHelper &#123; private long tokenExpiration; //有效时间,单位毫秒 1000毫秒 == 1秒 private String tokenSignKey; //当前程序签名秘钥 //生成token字符串 public String createToken(Long userId) &#123; String token = Jwts.builder() .setSubject(\"YYGH-USER\") .setExpiration(new Date(System.currentTimeMillis() + tokenExpiration * 1000 * 60)) //单位分钟 .claim(\"userId\", userId) .signWith(SignatureAlgorithm.HS512, tokenSignKey) .compressWith(CompressionCodecs.GZIP) .compact(); return token; &#125; //从token字符串获取userid public Long getUserId(String token) &#123; if (StringUtils.isEmpty(token)) return null; Jws&lt;Claims> claimsJws = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token); Claims claims = claimsJws.getBody(); Integer userId = (Integer) claims.get(\"userId\"); return userId.longValue(); &#125; //判断token是否有效 public boolean isExpiration(String token) &#123; try &#123; boolean isExpire = Jwts.parser() .setSigningKey(tokenSignKey) .parseClaimsJws(token) .getBody() .getExpiration().before(new Date()); //没有过期，有效，返回false return isExpire; &#125; catch (Exception e) &#123; //过期出现异常，返回true return true; &#125; &#125; &#125;","categories":[{"name":"java工具类","slug":"java工具类","permalink":"https://xp_ww.gitee.io/categories/java%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"tags":[{"name":"java","slug":"java","permalink":"https://xp_ww.gitee.io/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://xp_ww.gitee.io/tags/springboot/"},{"name":"utils","slug":"utils","permalink":"https://xp_ww.gitee.io/tags/utils/"}]},{"title":"nginx配置文件","slug":"nginx-config","date":"2023-09-30T15:19:56.000Z","updated":"2023-10-14T08:31:32.869Z","comments":true,"path":"blog/220664946.html","link":"","permalink":"https://xp_ww.gitee.io/blog/220664946.html","excerpt":"","text":"nginx基础配置woker_processes 1; #默认为1，表示开启一个业务进程 events &#123; worker_connection 1024; #单个业务进程可接受连接数 &#125; http &#123; include mime.types; #引入http mime类型 匹配类型和文件后缀名 default_type application/octet-stream; #如果mime类型没匹配上，默认使用二进制流的方式传输 sendfile on; #使用linux的 sendfile(socket, file, len) 高效网络传输，也就是数据0拷贝。 #HTTP 有一个 KeepAlive 模式，它告诉 webserver 在处理完一个请求后保持这个 TCP 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接。 keepalive_timeout 65; #keepalive超时时间 #虚拟主机配置(vhost) server &#123; listen 80; #监听端口号 server_name localhost; #主机名、域名 location / &#123; #匹配路径 uri root html; #文件根目录 index index.html index.htm; #默认页名称 &#125; error_page 500 502 503 504 /50x.html; #报错编码对应页面 location = /50x.html &#123; root html; &#125; &#125; &#125; 反向代理location / &#123; proxy_pass http://www.xp.com; &#125; 基于反向代理的负载均衡location / &#123; proxy_pass http://httpds; &#125; #下面内容放在http模块里面而不是server里面 upstream httpds &#123;#将请求发给列出的服务器达到负载均衡 server 192.168.37.3 weight=8;#weight表示权重，数值越大，分配的机会越大 server 192.168.37.4 weight=2 down;#down表示该服务器不参与负载均衡了 server 192.168.37.5 weight=1 backup;#backup表示备用机 &#125;","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"}]},{"title":"nginx编译安装","slug":"nginx-install","date":"2023-09-30T13:47:50.000Z","updated":"2023-10-21T13:40:36.559Z","comments":true,"path":"blog/347607591.html","link":"","permalink":"https://xp_ww.gitee.io/blog/347607591.html","excerpt":"","text":"一：在nginx官网下载Linux安装包 进入https://nginx.org/ 找到你想要的版本，并下载,我这里选择的是 nginx-1.21.6.tar.gz 通过Xftp上传到你的CentOS服务器 二：解压缩安装包 tar -zxvf nginx-1.21.6.tar.gz 三：编译安装 cd nginx-1.21.6 #ls 可以看到里面有个configure文件，这是一个安装脚本 ./configure --prefix=/usr/local/nginx # --prefix是指定安装在哪个目录下 #执行发现报错 #1.缺少C语言编译器 yum install -y gcc #2.缺少pcre库 yum install -y pcre pcre-devel #3.缺少zlib库 yum install -y zlib zlib-devel #编译 make &amp;&amp; make install 四：启动nginx 进入安装目录：/usr/local/nginx cd /usr/local/nginx 进入sbin目录：/sbin cd /sbin 启动 ./nginx 浏览器访问 ip:80 发现访问不到，因为防火墙阻止了访问，解决办法: #1.直接关闭防火墙，一般生产和学习的时候可以直接关闭防火墙 systemctl stop firewalld.service systemctl disable firewalld.service #禁止防火墙开机自启动 #2.安全的方式：需要哪个端口才开放哪个 firewall-cmd --zone=public --add-port=80/tcp --permanent #重启防火墙 firewall-cmd --reload 五:关闭nginx及其他命令 快速停止nginx ./nginx -s stop 优雅关闭，在退出前完成已经接收的请求 ./nginx -s quit 重新加载配置 ./nginx -s reload 查看nginx版本号 ./nginx -v 六:安装成系统服务 创建服务脚本 vi /usr/lib/systemd/system/nginx.service [Unit] Description=nginx - web server After=network.target remote-fs.target nss-lookup.target [Service] Type=forking PIDFile=/usr/local/nginx/logs/nginx.pid ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf ExecReload=/usr/local/nginx/sbin/nginx -s reload ExecStop=/usr/local/nginx/sbin/nginx -s stop ExecQuit=/usr/local/nginx/sbin/nginx -s quit PrivateTmp=true [Install] WantedBy=multi-user.target 重新加载系统服务 systemctl daemon-reload 启动服务 systemctl start nginx 关闭服务 systemctl stop nginx 重启服务 systemctl restart nginx 开启自启动 systemctl enable nginx","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"}]},{"title":"SpringBoot中集成SpringSecurity和Jwt","slug":"SpringSecurity","date":"2023-09-30T12:32:24.000Z","updated":"2023-10-12T02:05:05.131Z","comments":true,"path":"blog/619017079.html","link":"","permalink":"https://xp_ww.gitee.io/blog/619017079.html","excerpt":"","text":"如何在SpringBoot中集成SpringSecurity和Jwt？ Jwt大家应该都比较熟悉，大家写安全框架应该用到最多的就是Jwt了，而SpringSecurity大多数是大项目在用然后最近浅学了一下SpringSecurity,但是网上的教程大多数的集成都是老版本，对于新版本的集成比较少，然后自己也是琢磨了很久，看了下官方文档，，然后现在浅浅记录一下集成过程吧。 前置用户类 @Data @EqualsAndHashCode(callSuper = false) @Accessors(chain = true) @TableName(\"user_info\") @Alias(\"UserInfo\") public class UserInfo implements Serializable &#123;//序列化 private static final long serialVersionUID = 1L; @TableId(value = \"id\", type = IdType.AUTO) private Integer id; private String email;//邮箱 private String password;//密码 private String nickName;//昵称 private String realName;//真实姓名 private String phone;//电话 private String sex;//性别 private String avatar;// 头像 &#125; 一.引入依赖&lt;!--SpringSecurity依赖--> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-security&lt;/artifactId> &lt;!--版本自选，或者父项目版本，本文用的3.1.3--> &lt;/dependency> &lt;!--Jwt依赖--> &lt;dependency> &lt;groupId>com.auth0&lt;/groupId> &lt;artifactId>java-jwt&lt;/artifactId> &lt;version>3.11.0&lt;/version> &lt;/dependency> 二.Jwt工具类@Component @Slf4j public class JwtUtils &#123; //算法密钥 @Value(\"$&#123;jwt.secretKey&#125;\")//在application.yml文件里写，然后注入 private String jwtSecretKey; public String createToken(String userInfo, List&lt;String> authList) &#123; //创建时间 Date currentTime = new Date(); //设置过期时间 Date expireTime = new Date(currentTime.getTime() + (1000 * 60 * 60 * 24)); //jwt 的header信息 Map&lt;String, Object> headerClaims = new HashMap&lt;>(); headerClaims.put(\"type\", \"JWT\"); headerClaims.put(\"alg\", \"HS256\");//加密算法 //创建jwt return JWT.create() .withHeader(headerClaims) // 头部 .withIssuedAt(currentTime) //已注册声明：签发日期，发行日期 .withExpiresAt(expireTime) //已注册声明 过期时间 .withIssuer(\"xp\") //已注册声明，签发人 .withClaim(\"userInfo\", userInfo) //私有声明，可以自己定义 .withClaim(\"auth\", authList) //私有声明，可以自定义 .sign(Algorithm.HMAC256(jwtSecretKey)); // 签名，使用HS256算法签名，并使用密钥 //HS256是一种对称算法，这意味着只有一个密钥，在双方之间共享。 使用相同的密钥生成签名并对其进行验证。 应特别注意钥匙是否保密。 &#125; /** * 验证jwt的签名，简称验签 * @param token 需要验签的jwt * @return 验签结果 */ public boolean verifyToken(String token) &#123; //获取验签类对象 JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(jwtSecretKey)).build(); try &#123; //验签，如果不报错，则说明jwt是合法的，而且也没有过期 DecodedJWT decodedJWT = jwtVerifier.verify(token); return true; &#125; catch (JWTVerificationException e) &#123; //如果报错说明jwt 为非法的，或者已过期（已过期也属于非法的） log.error(\"验签失败：&#123;&#125;\", token); e.printStackTrace(); &#125; return false; &#125; //根据token获取用户信息 public String getUserInfo(String token)&#123; try&#123; // 使用秘钥创建一个解析对象 JWTVerifier jwtVerifier=JWT.require(Algorithm.HMAC256(jwtSecretKey)).build(); //验证JWT DecodedJWT decodedJWT = jwtVerifier.verify(token); Claim username = decodedJWT.getClaim(\"userInfo\");//注意对象要序列化 return username.asString(); &#125;catch (TokenExpiredException e)&#123; e.printStackTrace(); &#125; return null; &#125; 、 //通过token获取用户权限列表 public List&lt;String> getAuth(String token)&#123; try&#123; // 使用秘钥创建一个解析对象 JWTVerifier jwtVerifier=JWT.require(Algorithm.HMAC256(jwtSecretKey)).build(); //验证JWT DecodedJWT decodedJWT = jwtVerifier.verify(token); Claim auth = decodedJWT.getClaim(\"auth\"); return auth.asList(String.class); &#125;catch (TokenExpiredException e)&#123; e.printStackTrace(); &#125; return null; &#125; &#125; 三.新建安全用户类SecurityUser@Data public class SecurityUser implements UserDetails &#123;//SpringSecurity提供的接口 //核心就是实现UserDeatils接口，登录的对象存在这个类里面 private final UserInfo userInfo; private List&lt;SimpleGrantedAuthority> simpleGrantedAuthorities; //传入一个系统应用对象构造SecurityUser public SecurityUser(UserInfo userInfo) &#123; this.userInfo = userInfo; &#125; //如果设置了权限就在此实现给SecurityUser赋予权限业务 @Override public Collection&lt;? extends GrantedAuthority> getAuthorities() &#123; return null; &#125; @Override public String getPassword() &#123; String userPassword=this.userInfo.getPassword(); //注意清除密码，因为不想返回数据时让前端知道，只能由后端验证 this.userInfo.setPassword(null); return userPassword; &#125; @Override public String getUsername() &#123; return this.userInfo.getEmail(); &#125; @Override public boolean isAccountNonExpired() &#123; return true; &#125; @Override public boolean isAccountNonLocked() &#123; return true; &#125; @Override public boolean isCredentialsNonExpired() &#123; return true; &#125; @Override public boolean isEnabled() &#123; return true; &#125; &#125; 四.将用户Service实现类实现UserDetailsService@Service public class UserInfoServiceImpl extends ServiceImpl&lt;UserInfoMapper, UserInfo> implements IUserInfoService, UserDetailsService &#123; @Resource private UserInfoMapper userInfoMapper; @Override public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException&#123; UserInfo userInfo = userInfoMapper.selectByEmail(email); if (userInfo == null) &#123; throw new UsernameNotFoundException(\"账号不存在\"); &#125; return new SecurityUser(userInfo); &#125; &#125; 五.实现Jwt过滤器类，用于检查token@Component @Slf4j public class JwtCheckFilter extends OncePerRequestFilter &#123; @Resource private ObjectMapper objectMapper; @Resource private JwtUtils jwtUtils; @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123; //获取请求uri String requestURI = request.getRequestURI(); // 如果是登录页面，放行 if (requestURI.equals(\"/login\")) &#123; filterChain.doFilter(request, response); return; &#125; //获取请求头中的Authorization String authorization = request.getHeader(\"Authorization\"); //如果Authorization为空，那么不允许用户访问，直接返回 if (!StringUtils.hasText(authorization)) &#123; printFront(response,\"未登录\"); return; &#125; //Authorization 去掉头部的Bearer 信息，获取token值 String jwtToken = authorization.replace(\"Bearer \", \"\"); //验签 boolean verifyTokenResult = jwtUtils.verifyToken(jwtToken); //验签不成功 if (!verifyTokenResult) &#123; printFront(response,\"jwtToken 已过期\"); return; &#125; //从payload中获取userInfo String userInfo = jwtUtils.getUserInfo(jwtToken); //从payload中获取授权列表 List&lt;String> userAuth = jwtUtils.getAuth(jwtToken); //创建登录用户 UserInfo user = objectMapper.readValue(userInfo, UserInfo.class); SecurityUser securityUser = new SecurityUser(user); //设置权限 //List&lt;SimpleGrantedAuthority> authList = userAuth.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList()); //securityUser.setSimpleGrantedAuthorities(authList); UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToke = new UsernamePasswordAuthenticationToken(securityUser , null, null); //通过安全上下文设置认证信息 SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToke); //继续访问相应的url等 filterChain.doFilter(request, response); &#125; private void printFront(HttpServletResponse response, String message) throws IOException &#123; response.setCharacterEncoding(\"UTF-8\"); response.setContentType(\"application/json;charset=utf-8\"); PrintWriter writer = response.getWriter(); HttpResult httpResult = new HttpResult(); httpResult.setCode(500); httpResult.setMessage(message); writer.print(objectMapper.writeValueAsString(httpResult)); writer.flush(); &#125; &#125; 六.新建Security配置类@Configuration @Slf4j @EnableWebSecurity @EnableMethodSecurity public class SecurityConfig &#123; @Resource private JwtUtils jwtUtils; @Resource private ObjectMapper objectMapper; @Resource private JwtCheckFilter jwtCheckFilter; @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception &#123; http.addFilterBefore(jwtCheckFilter, UsernamePasswordAuthenticationFilter.class); http.authorizeHttpRequests(auth -> auth .anyRequest()//所有请求 .authenticated()//都需要认证 ); http.formLogin(form -> form .permitAll()//登录接口放开 .successHandler(new AuthenticationSuccessHandler() &#123;//认证成功处理器 @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException &#123; //从认证信息中获取登录用户信息 SecurityUser securityUser = (SecurityUser) authentication.getPrincipal(); UserInfo userInfo = securityUser.getUserInfo(); String strUserInfo = objectMapper.writeValueAsString(userInfo); // List&lt;SimpleGrantedAuthority> authorities = (List&lt;SimpleGrantedAuthority>) securityUser.getAuthorities(); // List&lt;String> authList = authorities.stream().map(SimpleGrantedAuthority::getAuthority).collect(Collectors.toList()); // //生成JWT String token = jwtUtils.createToken(strUserInfo, null); HttpResult httpResult = HttpResult.builder().code(200).message(\"jwt生成成功\").data(\"Bearer \"+token).build(); printToken(request,response,httpResult); &#125; private void printToken(HttpServletRequest request, HttpServletResponse response,HttpResult httpResult) throws IOException &#123; String jwt = objectMapper.writeValueAsString(httpResult); response.setCharacterEncoding(\"UTF-8\"); response.setContentType(\"application/json;charset=utf-8\"); PrintWriter writer = response.getWriter(); writer.println(jwt); writer.flush(); &#125; &#125;) ); http.csrf(csrf->csrf.disable()); return http.build(); &#125; @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125; &#125; 到此为止，就可与使用啦😴😴😴😴","categories":[{"name":"Web应用开发","slug":"Web应用开发","permalink":"https://xp_ww.gitee.io/categories/Web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xp_ww.gitee.io/tags/SpringBoot/"},{"name":"SpringSecurity","slug":"SpringSecurity","permalink":"https://xp_ww.gitee.io/tags/SpringSecurity/"},{"name":"Jwt","slug":"Jwt","permalink":"https://xp_ww.gitee.io/tags/Jwt/"}]},{"title":"二分查找","slug":"BinarySearch","date":"2023-09-29T07:53:10.000Z","updated":"2023-10-11T13:39:37.007Z","comments":true,"path":"blog/3907716225.html","link":"","permalink":"https://xp_ww.gitee.io/blog/3907716225.html","excerpt":"","text":"二分查找的几种方式第一种:左闭右闭 class Solution &#123; public int search(int[] nums, int target) &#123; int i = 0,j = nums.length-1; int m = 0; while(i&lt;=j)&#123; m = (i+j)>>>1; if(nums[m]&lt;target)&#123; i=m+1; &#125;else if(target&lt;nums[m])&#123; j=m-1; &#125;else&#123; return m; &#125; &#125; return -1; &#125; &#125; 第二种：左闭右开 class Solution &#123; public int search(int[] nums, int target) &#123; int i = 0,j = nums.length; int m = 0; while(i&lt;j)&#123; m = (i+j)>>>1; if(nums[m]&lt;target)&#123; i=m+1; &#125;else if(target&lt;nums[m])&#123; j=m; &#125;else&#123; return m; &#125; &#125; return -1; &#125; &#125; 第三种：平衡版二分查找 class Solution &#123; public int search(int[] nums, int target) &#123; int i = 0,j = nums.length; int m = 0; while(i &lt; j - 1)&#123; m = (i+j)>>>1; if(target&lt;nums[m])&#123; j=m; &#125; else&#123; i = m; &#125; &#125; return (nums[i]==target)?i:-1; &#125; &#125; 第四种：Arrays类的方法 class Solution &#123; public int search(int[] nums, int target) &#123; return Arrays.binarySearch(nums, target)&lt;0?-1:Arrays.binarySearch(nums, target); &#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xp_ww.gitee.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xp_ww.gitee.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"java","slug":"java","permalink":"https://xp_ww.gitee.io/tags/java/"}]},{"title":"操作系统","slug":"操作系统","date":"2023-09-27T13:52:45.000Z","updated":"2023-10-11T13:39:43.240Z","comments":true,"path":"blog/3494630844.html","link":"","permalink":"https://xp_ww.gitee.io/blog/3494630844.html","excerpt":"","text":"操作系统导学案题目一.操作系统概念、功能、发展历史1.为什么学习操作系统，其重要性，必要性，怎样学习操作系统？答：学习操作系统是计算机科学和工程必不可少的一部分，学习操作系统有以下几个方面的重要性和必要性： 提高计算机技能：操作系统是计算机系统的核心，所有应用软件都是建立在操作系统的基础上的，因此学习操作系统可以帮助我们更好地理解计算机系统的工作原理。 掌握计算机基础知识：操作系统涉及到计算机硬件、软件、网络等多方面的知识，学习操作系统可以帮助我们全面掌握计算机基础知识，有利于提高我们的学术水平和职业技能。 提高编程能力：操作系统是一个非常庞大和复杂的软件系统，学习操作系统可以帮助我们提高编程能力和软件工程技能，包括代码设计、调试和性能优化等方面的能力。 提高系统性能：对于系统管理员和网络管理员来说，学习操作系统可以帮助他们更好地管理和维护计算机系统，提高系统的稳定性和性能，降低维护成本。 学习操作系统的方法有很多种，包括自学、参加课程、阅读相关书籍、参与开源项目等等。如果想要深入学习操作系统，建议从计算机原理和操作系统基础开始学习，了解计算机的体系结构、CPU指令集、CPU中断处理、内存管理、文件系统等基本概念和原理，然后可以阅读《操作系统概念》、《现代操作系统》等操作系统经典教材，跟随开源社区的项目实践来深入探究操作系统的内部机制和实现原理。 2.有人认为windows，Mac OS，Android就够用了，不必再开发操作系统；有人说所谓的国产系统就是Linux包装一下，毫无意义；有人认为研究院、高校都应该投入人员经费去做操作系统的研究。你如何评价这些观点.答：这些观点都有一定道理，但需要从多个角度来评价。我的观点如下： Windows、MAC OS和Android等操作系统已经足够丰富，而且已经在不同领域得到了广泛应用，因此某种程度上确实没有必要再开发新的操作系统。但是，从科技创新和技术进步的角度来看，操作系统的研究和开发仍然具有巨大价值。新的操作系统可能引入新的编程模型、新的应用场景和新的技术特性，从而带来更多的变革和突破。 国产操作系统虽然通常基于开源Linux系统构建，但这并不代表它们毫无意义。国产系统在不断创新和改进，以适应国内的不同需求和市场环境。此外，国产系统还具有信息安全和自主可控的优势，可以提高国内计算机系统的安全性和稳定性。因此，国产操作系统在中国的发展仍然具有重要的意义。 对于研究院和高校而言，从事操作系统的研究和开发是重要的学术课题和技术挑战。操作系统不仅是计算机领域的基础和核心，而且也涉及到人工智能、物联网、边缘计算等重要的技术领域。因此，投入人员和经费进行操作系统研究和开发也是非常有意义和必要的。 总之，操作系统的研究和开发对于计算机领域和产业的发展都具有重要的贡献，我们应该鼓励和支持这方面的探索和创新。 3.一些教材指出操作系统的4个特征：并发、共享、虚拟、异步，教材17页的“不确定性”对应着什么？请对这些特征做出解释。答：教材的“不确定性”特征可以理解为“并发”和“异步”特征的结合。操作系统中的不确定性主要是指在多个进程同时执行的情况下，处理器和IO设备的请求会以不可预测的顺序出现，而且操作系统无法预测它们的调度顺序。这种不确定性也被称为“竞态条件”（race condition），可能会导致进程出现不可预测的结果。 四个特征的解释如下： 并发（Concurrency）：指在一个时间段内，有多个程序同时运行。在单处理器系统中，并发是通过中断、时钟中断或多道程序设计技术来实现的。而在多处理器系统中，则存在真正的并行处理。 共享（Sharing）：指系统中的资源（如硬盘、打印机等）可供多个进程或用户共同使用。因为资源有限，它的访问需要协调和管理。 虚拟（Virtualization）：指通过一种方式，把一个物理资源转化为多个逻辑上的资源，使得多个进程或用户可以同时使用这些资源。例如，虚拟地址空间允许多个进程共享内存，但每个进程都认为内存是独占的。 异步（Asynchrony）：指操作系统无法预测进程的请求和执行时间，请求和执行之间的时间间隔可能不确定。这是因为进程的请求时间和执行时间都受到许多因素的影响，如用户输入、IO操作等。为了应对这种不确定性，操作系统通常采用中断处理、调度算法等方式。 总之，这四个特征是操作系统的核心功能，这四个特征的组合为计算机系统提供了基础设施，使多个进程或用户可以共享资源并在同一时间运行。同时，由于操作系统的特殊性质，操作系统的分析、设计和实现都与它们有着密切的联系。 4.并行和并发的区别与联系？现代计算机内有多少CPU？程序运行是并行还是并发？答：并行（Parallel）和并发（Concurrency）是两个概念。 并发是指多个任务在同一时间段内被执行，常常是在一个 CPU 上轮流交替执行多个任务，从而造成多个任务同时执行的错觉。 并行是指多个任务在同一时间点上被执行，多个 CPU 可以同时处理多个任务，也就是说，可以同时执行多个计算环节。 现代计算机内部的 CPU 数量很大程度上取决于计算机设备的计算能力需求，从日常使用的 PC 和 Mac 等台式机和笔记本电脑中的 2 或 4 核 CPU，到数据中心和高性能计算机（HPC）中可拓展到超过数千个核心的 CPU。 程序运行时并行还是并发，则取决于实际使用的计算环境。在单个 CPU 计算机上运行的程序通常是并发的，而在拥有多个 CPU 的计算机设备上运行的程序可能同时执行并行计算。 5.有人说：专心做事一件事比同时做多件事效率高，那么多道系统效率没有单道系统效率高，这种说法是否正确？单道的好处是什么，多道系统是否已经取代了单道系统？答：这种说法是有道理的。专心做一件事比同时做多件事更能提高效率，因为当我们专注于一件事情时，可以更好地集中精力和资源，能够更快地完成任务，减少遗漏和错误的概率。同时，多任务切换所带来的上下文切换开销也会降低计算机系统的整体效率。 单道系统是指一次只能处理一个任务或进程的操作系统，在单任务条件下，一旦任务进入就会一直执行，直到其运行结束为止。单道系统的好处是简单，易于实现和维护，而且可以避免多任务切换的开销和调度问题。它适用于资源简单的环境，在较简单的场景下可以优化整个系统。 然而，现代计算机系统中多数采用多道系统（Multi-Programming System)。多道系统意味着多个进程同时在计算机系统中工作，计算机系统可以在每个程序的执行过程中完成多任务切换，充分利用 CPU 和其他资源，从而提高整个系统的效率。 相较于单道系统，多道系统最大的好处在于可以有效地充分利用资源，减少了进程等待时间，同时提高了系统的响应速度。此外，多道系统可以兼容多种应用程序，提升整个系统的兼容性和应用场景。 总之，单道系统的好处在于简单和易于实现维护，但是在现代计算机系统中，多道系统已经成为主流，它充分利用了计算机资源，并且可以为多个进程和应用程序提供更好的服务和支持。关于“专心做事一件事比同时做多件事效率高，那么多道系统效率没有单道系统效率高，这种说法是否正确？”的问题，需要根据具体情况进行分析。从原则上来说，多道系统的效率应该比单道系统的效率高，这是因为多道系统允许系统同时处理多个任务，进而提高了 CPU、内存等系统资源的利用率，从而达到更高的系统吞吐量和更少的等待时间。但是，由于多道系统需要对多个任务之间的资源共享和调度进行管理，因此需要更大的系统内核和管理开销，也有可能带来更多的垂直性能下降。因此，在实践中，选择单道系统还是多道系统应该根据具体的应用场景和性能指标进行比较和选择。 单道系统的优势在于在运行单个进程时拥有最高的系统资源利用率，以及更少的资源调度和管理开销。因此，在需要处理具有一致性需求的独立任务（例如单个应用程序、服务等）时，单道系统可能是一个良好的选择。相反，多道系统更适用于需要同时处理多个任务且需要较高资源的场景。 随着计算机系统的发展，多道系统已经基本上取代了单道系统，因为多道系统在大多数应用场景下具有更高的效率和性能。但是，一些特定的应用场景，例如实时系统和嵌入式系统，在实践中需要使用单道系统或者单道处理器。 6.实时系统的概念、衡量指标等，Windows响应速度很快，是否是实时系统？答：实时系统是指计算机或嵌入式系统需要在严格的时间限制内完成任务。实时系统可以分为硬实时系统和软实时系统。硬实时系统需要以确切的时序满足主要任务，而软实时系统可以容忍一定程度的偏差。实时系统的性能通常由以下几个指标进行衡量： 响应时间：指从发出请求到获得回应的时间，即从请求到任务完成所需的时间。 周转时间：指从任务发起到任务结束的时间。 时序准确度：系统是否能够在精确的时间内完成任务。 中断延迟：指硬实时系统在收到中断请求后，能够在完全准确的时间内完成任务的能力。 Windows 不是一个实时系统。虽然 Windows 响应速度很快，但它并没有设计成一个硬实时系统。这是因为 Windows 为了提供更好的用户体验和计算能力，会在不同的时间段执行不同的任务，并且在网络和 IO 调度上具有不完全可预测的性质。然而，对于许多正常用户的应用，如文档编辑、图片处理和多媒体播放等方面，Windows 具有很高的实时性和实用性，可以完全满足常见任务的需求。 7.多核和多CPU 的解释，和并行并发的关系答：多核和多CPU是指现代计算机系统中的两种不同的多处理器技术。 多核处理器可以在一个 CPU 芯片内集成多个独立的处理核心，每个核心可以独立处理多个任务或线程，并共享 CPU 内部缓存和其他系统资源。多核处理器提高了计算机系统的运行速度和处理能力，节省了能源和物理空间成本，并降低了计算机系统的复杂性和故障率。 另一方面，多个 CPU 并行工作，每个 CPU 都可以执行不同的任务或处理线程。与多核处理器相比，多 CPU 处理器需要更多的物理空间、系统资源和能量，并且需要更多的硬件、系统软件和操作系统支持。多 CPU 处理器可以在应用程序中实现更高的并行性，以提高应用程序的性能。 并行和并发是两个有密切关系但却不同的概念。 并行可以理解为多个任务在同一时间点上被运行。也就是说，多个任务同时发生，并且不互相干扰。在计算机领域，多个 CPU 可以同时处理多个任务，即并行计算。 并发是指多个任务在同一时间段内被运行，并且它们会相互干扰和影响。在单 CPU 系统中，由于操作系统调度算法的存在，一个进程在处理 I&#x2F;O 操作的同时，可能会暂停它的 CPU 请求，允许其他进程获得 CPU 执行时间。通过这种方式，多个进程可以同时运行，但是它们共享 CPU 和其他系统资源，产生资源争用问题。 总之，并行指的是同一时间点上多个任务的处理能力，而并发指的是同一时间段内多个任务的处理能力。多核和多 CPU 处理器都可以实现更高的并行性和并发性，提高计算机系统的性能和效率。 8.Linux是开源软件，自由(Free)软件，开源协议GPL是什么意思，开源和免费的关系答：GNU General Public License (GPL) 是一种开源软件使用和分发的许可协议。GPL 允许开发者免费地使用、复制、修改、发布软件，并强制其在分发时开放源代码，并使用 GPL 许可协议分发其衍生作品。使用 GPL 许可协议发布的软件可以自由使用，分发，修改，同时分发的任何衍生作品也必须在同一许可协议下分发，并且需要开放源代码。 开源软件指的是可以通过查看源代码来了解应用程序运行的细节、机制和结构，且可以免费使用和分发的软件。开源不一定免费，但是开源软件通常是免费的或者使用费用相对较低。开源软件的使用者可以修改源代码以适应自己的需求和用途，但是需要遵守适用的版权和许可协议。 自由软件指的是可以自由地使用、复制、分发，同时也可以查看和修改源代码的软件。自由软件的使用者可以自由地改进、扩展、修改代码以适应自己的需要，而不需要担心任何版权问题。开源软件和自由软件基本上是相同的，只是侧重点不同，自由软件更注重于更广泛的自由和隐私权，开源软件更注重于源代码的公开性和透明度。 开源和免费的概念密切相关，但是并不等价。开源软件的源代码是公开可见的，因此用户可以阅读和了解应用程序的实现细节和机制，同时也可以自由地修改代码和创造衍生作品。然而，开源并不一定代表免费，一些开源软件可能会收取使用费用，例如 Red Hat 的商业 Linux 发行版。而免费软件并不一定是开源的，例如某些专有软件可能是免费的，但是源代码是不公开的。 综上所述，开源和免费是相关但不等价的概念，GPL 协议是一种保护开源软件的许可证，允许软件使用者在符合一定条件的情况下免费地制作、发布和修改软件的源代码，同时确保它们的修改必须是开放源代码的。 9.查阅资料了解和操作系统相关的几个著名人物：理查德斯托曼，肯·汤普森等的事迹答： Richard Stallman (理查德·马修·斯托曼) Richard Stallman，简称 rms，是计算机自由软件运动的奠基人之一，他于1983年创立了自由软件基金会（Free Software Foundation，以下简称 FSF），并发起了 GNU 项目。他是 GNU 通用公共许可证（General Public License，以下简称 GPL）的主要设计者之一，这也是开源软件中最有影响力的许可证之一。 理查德·斯托曼始终奉行自由软件的理念，坚信开源软件的必要性，并在许多场合发表演讲和文章，阐述自由软件运动的哲学和理念。他一直倡导将软件视为基本权利而非商品，其目标是为了推动自由软件的发展、提高人民自治权利、抵制商业对数字科技的控制、促进信息交流和知识共享等。 Ken Thompson（肯·汤普森） 肯·汤普森（Kenneth Lane Thompson）是贝尔实验室早期的研究员，是 Unix 操作系统的联合创始人之一。他和丹尼斯·里奇一起，发明了 C 语言并使用 C 语言重新实现了 Unix 操作系统，从而为操作系统的可移植性和跨平台性打下了坚实的基础。 肯·汤普森还开发了正则表达式、stream编辑器（sed）、文本编辑器（QED、ed、vi）、图形绘制语言（Pic）、类型排版语言（troff）等基础工具。他被授予图灵奖等多项荣誉，以表彰其对计算机科学的贡献。 Linus Torvalds（林纳斯·托瓦兹） 林纳斯·托瓦兹（Linus Torvalds）是著名的计算机科学家和程序员，他创立了 Linux 操作系统和 Git 版本控制软件。在大学时，他模仿 Unix 操作系统，于1991年创建了 Linux 内核，开启了开源软件的新时代。 Linux 操作系统代表了开源软件的历史和现在，它发展迅速，已经成为科学计算、企业服务器、嵌入式系统和智能手机等领域的主流操作系统。林纳斯·托瓦兹是 Linux 的创建者和维护者，他致力于开启计算机软件的开源文化，同时也是开源共享精神的代表人物之一。 总之，这些人物对计算机行业都做出了重要的贡献，他们的事迹和思想对计算机领域的发展和推动给予了重要影响。在计算机技术的不断发展中，他们的事迹也会为人们提供重要的借鉴和参考。 10.批处理系统中有个概念：吞吐量，了解吞吐量的含义 答：在计算机科学中，吞吐量（throughput）是衡量在一定时间内一台机器处理的工作量的指标，通常用于评估计算机系统的性能。吞吐量可以用于衡量并发系统的能力，比如 web 服务器、数据库服务器等，这些系统需要同时处理多个请求，因此需要具备较高的吞吐量来支持高并发。 吞吐量通常被定义为在一个指定时间段内，计算机系统处理任务的数量。例如，一个网络服务器每秒钟处理 100 个请求，则其吞吐量为 100 请求&#x2F;秒。吞吐量通常与响应时间（response time）一同使用来衡量计算机系统的效率和性能。响应时间是指完成单个任务所需的时间，而吞吐量则是单个系统在某个时间段内完成任务的数量。 在批处理系统中，吞吐量是指在一定时间内完成的任务数量。批处理系统通常被用于处理大量相似或重复的任务，它们的工作流程是自动化的，完全依赖于系统内部预定义的规则和流程。批处理系统需要快速处理大量的数据并生成处理结果，因此需要具备较高的吞吐量来支持。 吞吐量通常是计算机系统性能评估中的一个关键指标，它受到多个因素的影响，包括硬件设备、操作系统、应用程序等。在优化计算机系统性能时，可以通过增加系统硬件容量、优化算法、调整应用程序代码等方式来提高吞吐量，从而提高系统的总体性能。 11.脱机批处理系统的工作过程答：脱机批处理系统是一种计算机系统，它的主要作用是自动完成大量重复性的任务，例如数据处理、报表生成等等。脱机批处理系统有自己独立的程序和数据存储空间，并在不需要用户交互或控制的情况下，按照预先定义的任务列表自动执行任务。下面是脱机批处理系统的工作过程： 操作员编写作业卡（job card）：在脱机批处理系统中，操作员首先需要编写一个包含程序和处理参数等信息的作业卡。作业卡通常包含作业名称、输入文件和输出文件名、程序名称、处理参数等等信息。 提交作业卡：操作员将作业卡提交给脱机批处理系统管理人员，经过一定的审核和检查后，将该作业加入到作业队列中。 作业调度：脱机批处理系统管理程序根据一定的作业优先级、资源使用、作业依赖等考虑因素，对作业队列中的作业进行调度。当系统准备好处理某个作业时，便要求操作员将相关的数据文件加载到系统中。 作业运行：当作业进入系统后，脱机批处理系统按照指定的程序处理数据文件，执行各种计算任务，处理流程完全自动进行。作业运行期间系统会记录各种运行日志，如错误信息、处理时间、处理的输入及输出等等。 输出数据和作业控制：当作业运行完毕后，系统会将处理的结果存储在输出数据文件中。在输出数据完毕后，脱机批处理系统会将运行日志和输出数据文件等信息交还给管理人员，以供后续的操作和使用。 脱机批处理系统的工作过程是操作员提交作业卡，由系统自动运行、处理输出数据，整个过程是离线的、自动化的，这种方式可以大量节约人力、时间和成本，非常适用于处理大量相似工作的场景，例如日报、批量数据处理等场景。 12.描述计算机的启动过程答：计算机的启动过程又称为引导（boot），是指将计算机从关机状态转化为运行状态所必须的过程。计算机启动过程是一个复杂的过程，一般分为硬件自检（POST）、主引导记录（MBR）载入、操作系统内核载入、系统初始化、系统自举等多个步骤，以下是计算机的基本启动过程： 电源供电：计算机的启动首先需要电源供电，用户通过按下电源按钮使电源启动并进入待机状态。 硬件自检（POST）：计算机启动后，CPU 首先执行自检程序（POST），对计算机内部硬件设备进行诊断和测试，确认所有硬件设备都正常工作，以确保计算机能够正常启动。 主引导记录加载（MBR）：硬件自检结束后，计算机开始读取主引导记录（MBR），并加载启动管理程序（boot loader），该程序具有启动操作系统的指令。 操作系统内核载入：启动管理程序开始执行，加载操作系统的内核文件（kernel）。这个过程涉及到主板芯片组（chip set），用于与其它系统组件通信的设配器（例如磁盘控制器），以及操作系统驱动程序的加载。 系统初始化：一旦操作系统内核加载完成，它就开始初始化系统并将控制权交给操作系统。初始化过程涉及各种设备驱动程序、网络协议和文件系统等方面。 用户登录：操作系统启动后，会启动登录界面，用户需要输入用户名和密码以登录系统，然后可开始进行各种操作。 总之，计算机启动过程是一个由硬件自检、主引导记录加载、操作系统内核载入、系统初始化、用户登录等多个步骤组成的序列，需要参与多个组件的密切协作，从而使计算机从关机状态转化为运行状态，并准备就绪等待用户进行各种操作。 二.操作系统逻辑结构和硬件知识1.操作系统几种模式的特点（优缺点），给出一些考题答：操作系统常见的模式有用户模式和内核模式，下面分别介绍其特点和考题： 用户模式 用户模式是指操作系统允许用户直接访问硬件资源、运行自己的应用程序、进行各种操作的一种模式。用户模式下，应用程序没有权限直接操作硬件资源，而是通过系统调用（system call）向操作系统申请执行某些操作，操作系统会切换到内核模式，执行相应的操作，并返回结果给应用程序。 优点：- 支持多任务，多用户的并发执行- 运行速度快，适合于用户应用程序 缺点：- 缺乏对硬件资源的直接访问权限- 无法直接访问内核数据结构，对系统调用的过度使用会影响系统性能 考题：- 请简述用户模式的特点和优缺点。- 给出一种常见的操作系统API（Application Programming Interface），说明该API和用户模式的关系。- 操作系统如何保证用户模式下应用程序的安全性？ 内核模式 内核模式是指操作系统拥有对所有硬件资源的直接、完全控制权，并能执行所有指令的一种模式。在内核模式下，操作系统能够直接操作硬件资源、执行各种内核功能。当应用程序进行系统调用时，操作系统会检查请求的合法性，然后进入内核模式执行相应的操作。 优点：- 对硬件资源有直接的访问权限- 可以访问内核数据结构，支持更高级别的系统调用 缺点：- 在内核模式下，操作系统运行速度比用户模式慢- 内核模式下的代码容易受到恶意攻击 考题：- 请简述内核模式的特点和优缺点。- 在操作系统中，什么情况下会触发用户模式和内核模式之间的切换？- 请简要说明内核模式和用户模式之间的区别。 除此之外，还有一些特殊模式，例如实时模式、虚拟模式等，都有各自的优缺点和适用条件。 2.用自己的语言描述一下内核到底是什么，如何理解用户模式(用户态)，内核模式(内核态)，内核和内核态，用户程序和用户态有什么区别和联系？答：操作系统的内核（kernel）是操作系统的核心部分，它负责管理系统的各种资源和功能，如进程管理、内存管理、文件系统、设备管理等。内核掌握系统对硬件的访问权限，提供应用程序访问系统资源的接口，同时保证系统的可靠稳定运行。 用户模式和内核模式是CPU的执行状态，也称为用户态和内核态。在用户模式下，应用程序只能访问自己的地址空间和系统调用接口，不能直接操作硬件资源。在内核模式下，操作系统拥有对所有硬件资源的直接控制权，可以执行任何运算和操作，但应用程序无法直接访问内核代码。 用户程序和用户态指的是一种运行状态，即应用程序的运行环境。在用户态下，应用程序只能访问自己的地址空间和系统调用接口，无权直接操作硬件资源。在内核态下，操作系统掌握对所有硬件资源的直接访问权限，应用程序无法直接访问内核代码。 内核，指的是操作系统的核心部分，即计算机操作系统中控制计算机硬件和软件资源的核心程序。操作系统的内核提供一系列系统调用API（Application Programming Interface），允许应用程序使用操作系统的服务和资源。 用户程序和内核程序之间的区别和联系：用户程序只能在用户态中运行，不能直接访问内核的资源，必须通过系统调用来请求内核来完成特定的操作。内核程序在内核态中运行，能够访问所有系统资源。应用程序可以通过系统调用访问内核中的程序代码，而系统调用则是一个中断机制，使得操作系统能够从用户态切换到内核态，完成所需的操作，然后再返回到用户态。 3.解释“系统调用”，说明为什么要有系统调用，如何调用答：系统调用是操作系统提供的一组API（应用程序接口），它是让应用程序可以访问操作系统内核的服务和资源的一种方式。操作系统内核负责管理系统的各种资源和功能，如进程管理、内存管理、文件系统、设备管理等，而应用程序需要这些服务和资源才能完成自己的任务。 为什么要有系统调用呢？这是因为操作系统内核一般运行在特权模式下，可以访问系统硬件资源，而用户程序一般运行在非特权模式下，不能直接访问硬件资源，必须通过操作系统内核提供的API接口来实现对系统资源的访问和操作。为了保证操作系统的安全和稳定，系统调用提供了一种安全而可控制的方式，让应用程序可以访问系统资源，同时又不会中断操作系统的正常运行。 操作系统提供的系统调用包括读写文件、创建和销毁进程、设置定时器、网络通信等功能。调用系统调用时，应用程序需要使用系统调用号码来唤醒操作系统内核，让内核来执行相应的任务。 在各个操作系统中，系统调用的具体实现方法有所不同。以Linux为例，常用的系统调用有open、read、write、close等，这些系统调用实际是通过中断机制来调用。当应用程序执行系统调用时，会通过软件中断INT 80H的方式进入内核态，从而向操作系统申请相应的服务。操作系统内核处理完请求后，再返回应用程序，并把请求结果传递给应用程序。 需要注意的是，使用系统调用时要小心不要滥用，因为操作系统的内核是一个运行在特权模式下的核心程序，访问它的代价比较高昂。如果应用程序过于频繁地使用系统调用，可能会导致不必要的上下文切换和资源浪费，从而影响系统性能。 4.解释“中断机制”：为什么要使用中断？中断什么时候发生？发生的原因？中断发生后是什么样？答：中断机制是操作系统的核心机制之一，它是实现操作系统与外部设备交互的重要方式。中断是指外部设备向CPU发出的一种信号，通知其需要进行响应处理。在计算机中，中断可以分为硬件中断和软件中断两种类型。 为什么要使用中断？中断机制是一种异步机制，可以让CPU在正常运行代码的同时，对外部事件做出及时的响应。使用中断可以提高设备的利用率，降低CPU的负载，使计算机系统能够更加高效地运行。 中断什么时候发生？发生的原因？中断一般由硬件设备发出，通知CPU需要执行相应的服务程序。比如当一个按键按下时，会产生一个中断信号，通知CPU需要执行键盘中断处理程序来响应该事件。 中断发生后，CPU会把当前的执行状态保存（即保存相关的寄存器内容和下一条指令的地址等信息），并切换到中断处理程序进行处理。处理程序往往是由操作系统提供的，用于执行设备驱动程序、处理设备数据、更新内核数据结构等任务。在处理程序执行完成后，CPU会恢复中断之前的执行状态，继续执行被中断的程序。 需要注意的是，中断机制是操作系统对外部事件的响应方式，必须对中断进行适当的管理和调度，避免因过多的中断请求导致系统资源的浪费和不必要的上下文切换。为了实现合理的中断管理，操作系统会针对不同的中断源，设置不同的优先级和响应策略，以保证系统的稳定运行。 5.讲解“总线”答：总线（Bus）是一种用于在计算机内部各个组件之间传输数据的通信线路。它是计算机体系结构中的基础，用于将各种设备、组件和子系统连接起来，实现它们之间的可靠通信和协同工作。 总线通常分为地址总线、数据总线和控制总线三部分。其中，地址总线用于传输设备或者存储器的地址信息，控制总线用于传输控制信号，例如读写控制信号、中断请求信号等。而数据总线则用于传输数据和指令信息，从而实现对内存、外设的读写等操作。 计算机中的总线主要包括系统总线、内存总线和I&#x2F;O总线等。系统总线连接CPU、内存和I&#x2F;O总线，起控制作用。内存总线连接CPU和内存存储器，用于传输数据和地址信息。I&#x2F;O总线连接CPU和输入输出设备，实现CPU与外部设备的交换。 总线的性能优化也是计算机体系结构中的重要问题之一。通过提高总线的带宽、信号速度、数据传输效率等方面的优化，可以减少总线的通信时间，从而提高系统的效率和性能。此外，现代计算机中也存在许多高速缓存和矩阵运算单元这样的加速器，它们和传统的CPU、内存之间的数据通信问题也可以通过总线的设计和优化来解决。 6.阅读扩展资料（著名的争论），说一下你理解的微内核（比如鸿蒙系统）答：微内核是一种操作系统内核的设计方式，它将内核的核心功能（如进程管理、内存管理和IPC等）与设备驱动和其他操作系统服务分离开来，以形成一个更加灵活和可扩展的系统架构。与传统的内核设计方式相比，微内核通常更易于维护、升级和扩展，因为内核的大小更加紧凑，内核核心功能的修改也更加容易。 鸿蒙OS是一款基于微内核设计的操作系统，它采用了名为”Hongmeng”的微内核，这个内核占用内存更少，启动速度更快，能够支持更加广泛的设备和场景。鸿蒙的微内核只提供了最基本的系统功能，而其他服务都是在用户空间或者虚拟空间中运行的，通过进程间通信实现服务的交互。 微内核设计的优势在于其内核紧凑，扩展性和灵活性更好，而且由于代码的模块化，对中间件和应用开发的支持更好，可以提高生态和用户体验。但是，微内核的缺点也是明显的，因为其进程间通信会使得系统调用相对复杂，增加开发人员的难度。同时，更多的服务需要在用户态运行，也可能导致一些性能问题。 总结来说，微内核架构的操作系统相对于传统内核设计方式更加灵活，更易于扩展和维护，但它也有一些缺点，需要权衡考虑具体应用场景和需求。 7.用户态向内核态转有多种情形（用户请求OS提供服务、发生中断、用户进程产生错误、用户态企图执行特权指令），但是本质上就是一种情形，即通过中断的形式进入。如何理解这句话？答：这句话表达的是在计算机中，无论是用户请求操作系统提供服务、发生中断、用户进程产生错误、还是用户态尝试执行特权指令，从用户态到内核态的转变本质上都是通过中断的形式实现的。 当用户态需要向内核态发出请求时，如调用系统调用、请求资源等，用户程序需要将请求参数传递给操作系统，然后通过软中断的方式发起中断请求，从而陷入内核态。在发生硬件中断时，中断控制器会将中断请求发送给CPU，在CPU完成当前指令之后立即停止执行，转而去执行与中断相关的中断处理程序，处理完之后再继续执行之前被打断的指令。 在用户进程产生错误或企图执行特权指令时，CPU会检测到错误并触发中断。操作系统将会针对不同类型的中断请求执行不同的处理程序，如调用相应的设备驱动程序、分配资源等。 无论中断请求的源头是什么，用户态到内核态的转变都是通过中断的方式实现的。操作系统需要对中断请求做出及时、正确的响应以保证系统的正常运行。 8.对Intel CPU的运行级别和保护模式，特权模式的理解答：Intel CPU的运行级别一般分为四种，分别是Ring 0、Ring 1、Ring 2和Ring 3。Ring 0为内核态，代表CPU最高的权限级别，只有操作系统内核可以运行在这个级别。Ring 1-3代表用户态，权限逐渐降低，Ring 3为最低权限，只有用户程序能够运行在这个级别。 在Intel CPU中，保护模式是一种特殊的运行模式，用于保护操作系统和用户程序的安全和稳定。这种模式下，CPU使用分段机制对内存进行了保护，使得每个进程只能访问自己的地址空间，从而避免了进程和操作系统之间的相互干扰。此外，保护模式下还支持虚拟内存、分页机制、系统调用等多种特性，使得系统在安全性和性能上都能得到更好的保障。 在保护模式下的CPU运行级别被称为特权级别，可分为四个级别，分别是Ring 0-3，级别越低的程序拥有越少的权限，不能直接访问CPU、内存等系统资源，只能通过操作系统提供的API调用来访问。Ring 0级别是最高特权级别，代表内核态，只有操作系统内核才能运行在这个级别。Ring 3级别为最低特权级别，代表用户态。操作系统和用户程序都运行在Ring 3以及以上的特权级别，而用户程序不能进入到Ring 0的特权级别中。 总之，Intel CPU的运行级别和保护模式实现了在计算机系统中的多层次安全保护，保护计算机的威胁和机密信息不被非授权用户访问和修改。 三.进程概念和进程基本状态，PCB1.程序的顺序执行有何特征？为什么有这些特征？答：程序的顺序执行主要表现为程序指令的执行顺序是按照程序代码给出的顺序执行，一条指令执行完毕后再执行下一条指令。这种执行方式是计算机硬件根据指令的指针、计数器等控制信息依次读取并执行指令的结果。 程序的顺序执行主要有以下两个特征： 程序指令是在一条接一条地执行。这种执行方式使得计算机能够按照程序代码的规定顺序来执行每一条指令，确保了程序的正确性，同时也保证了程序的可读性和可维护性。 程序的执行过程是一条指令执行完成后再执行下一条指令。这种顺序执行方式使得计算机能够有序地执行程序中的指令，从而确保每个指令的正确执行和正确处理数据。 这些特征的存在是因为计算机的硬件结构和指令的执行原理。在计算机的硬件结构中，CPU负责执行指令的过程，每个指令一般都需要完成一个特定的任务，例如运算、传输、跳转等操作。CPU通过识别指令中的操作码和操作数，依次执行每一条指令中的操作。 同时，指令的执行需要按照一定的顺序进行，例如控制指令需要优先执行，数据操作指令需要等到数据准备好后才能执行。因此，程序的顺序执行是基于计算机硬件和指令系统的运行原理，以确保指令能够正确地执行、数据能够被正确处理。 2.进程有什么特征？进程和程序的区别是什么？为何引入进程？答：进程(Process)是计算机系统中的一个术语，指在电脑上执行的一段程序。进程具有以下几个特征： 动态性：进程是一个动态的概念，它的生命周期包括创建、运行、等待、挂起、终止等多个状态。 并发性：系统中可以存在多个进程同时运行，每个进程都有自己的程序计数器、堆栈等内存空间，互相独立。 独立性：每个进程都有自己的地址空间，属于不同的进程之间的变量和程序代码是互不影响的。进程之间可以通过进程间通信机制来实现数据共享和交互。 随机性：由于系统中可能存在多个进程，每个进程的执行都受到许多因素的影响，因此进程的执行顺序和时间都是不确定的。 进程与程序的区别是，程序是一个静态的概念，是指一组指令和数据的集合，不具有运行和管理功能。而进程则是对程序的一种运行状态描述，是指在某个特定时间段内，正在执行的程序，并且具有独立的内存空间、CPU时间片、系统分配的CPU资源等，能够独立运行于系统中。 引入进程主要是为了更加有效的利用计算机资源，同时也方便进程间的互相通信与交互。通过操作系统的进程管理机制，能够保证每个进程可以有适当的时间片并发地执行，并可以得到资源的合理分配和调度，从而充分利用计算机的 CPU 和内存等资源，提高计算机的工作效率和生产力。 3.程序代码长度和进程大小有没有关系？进程大小如何确定？是否可变？答：程序代码长度和进程大小并不是完全相关的，两者的大小并不完全相等。进程的大小一般包括程序代码、数据和内存占用等多方面的因素，大小可以根据需要来确定和调整。 具体来说，进程的大小主要由以下几个方面的因素共同决定： 程序代码的长度：程序包含指令、函数、库等相关代码，以及数据区、BSS、堆栈等占用内存的相关信息，程序代码的长度大小是影响进程大小的一个因素。 数据占用的内存大小：进程中包含的数据结构、变量等都需要占用一定的内存空间，该内存大小也是影响进程大小的一个因素。 库和动态链接文件：在进程运行时，可能会使用一些系统库或者动态链接文件，这些文件占用的内存空间也会计入进程的大小。 运行时需要占用的堆栈和堆内存：进程在运行时需要占用一定的堆栈和堆内存空间，这些空间也是进程大小的重要组成部分。 进程的大小是动态可变的，因为进程在运行过程中需要动态分配内存空间，可以根据需要来调整进程大小。进程可能会释放占用的内存，也可能会申请新的内存空间，进程大小随之相应地变化。 总之，进程大小的计算是比较复杂的，并且与具体的应用程序有关。在实际应用过程中，我们需要根据实际应用情况来确定进程大小，并根据需要来动态调整进程的内存大小，以充分利用计算机资源，提高系统性能。 4.PCB的作用，操作系统的内核代码中什么地方会用到PCB？操作系统的PCB是否相同？PCB的内容由什么来决定？答：PCB（Process Control Block）又叫进程控制块，是操作系统中用于描述和管理进程的数据结构，主要用于记录和维护进程的运行状态、环境和资源等信息，是操作系统内核代码管理进程的基础结构。 PCB的主要作用有以下几个方面： 记录和管理进程的各种状态：PCB中记录了进程的状态信息，包括就绪、运行、阻塞等状态，以及进程的运行优先级、资源占用等信息。 维护进程的资源信息：在PCB中记录了进程所占用的系统资源信息，包括内存、文件、设备、锁等等，这些资源由操作系统内核在系统中进行管理。 实现进程的调度和切换：系统内核可根据PCB中记录的进程状态信息，进行进程的切换和分配，以保证进程间的调度和资源的充分利用。 保护和安全控制：PCB中还包括了进程的安全和保护相关信息，确保进程对系统资源和其他进程的访问不会出现冲突和不当的操作。 操作系统的内核代码中使用PCB主要用于进程的管理和调度。在内核代码中，会通过记录和操作PCB信息来控制进程的运行，包括创建新的进程、启动、挂起、终止等操作。当进程在运行时，操作系统会根据PCB中的信息进行调度，把CPU、内存等资源进行动态分配，以保证进程的正常运行。 不同进程的PCB是不相同的，每个PCB都记录了进程的独立信息，所以在操作系统中不可能存在两个PCB内容完全相同的进程。PCB的内容由具体的操作系统和应用程序所需的信息来决定，通常PCB包含了进程标识、运行状态、优先级、内存分配信息、资源使用信息等多方面的信息，这些信息都是由操作系统及共用库来决定和协调的。具体来说，不同的操作系统和应用程序的PCB内容和结构可能会有所不同，但它们都具有管理和调度进程的基础结构特征。 5.解释进程3种基本状态（run，ready，block）的转换哪些可以有，哪些没有，为什么？阻塞能不能直接到运行？如果系统里面只有一个进程呢？答：进程通常有三种基本状态：运行态（run）、就绪态（ready）、阻塞态（block），它们之间是互相转换的。但并不是所有状态之间都可以直接转换的，下面分类分析： 可以由 Ready 状态转换到 Run 状态，由运行态进程结束或被阻塞而转化到 Ready 状态，由阻塞状态进程上的事件完成而转化为 Ready 状态，因为 Ready 状态代表了可以运行的状态。 不可以由 Run 状态转化为 Ready 状态，因为从运行态进程转化为就绪态进程需要让出 CPU，而在执行期间的进程不能让出 CPU。 不可以由 Ready 状态直接变为阻塞态，而是必须经过 Run 状态。当进程运行时，可能会遇到一些等待的事件（如等待文件读写完成），此时进程会变成阻塞态，只有等到事件完成后，再由阻塞态转化为就绪态。 不可以直接从阻塞态进入运行态，因为要进入运行态，必须先从阻塞态进入就绪态，然后由就绪态进入运行态。 当系统只有一个进程时，该进程将一直处于运行状态，不会发生状态之间的转换，因为都是其自己在运行。但是，如果该进程需要等待某个事件的完成，比如输入输出操作，则会进入阻塞状态，直到事件完成为止。 6.进程引入“挂起（suspend）”状态后，原来的3状态中哪些变了？解释加入挂起状态后的状态转换图答：引入挂起状态后，原来的三种状态（运行态、就绪态、阻塞态）并没有改变，但是添加了一种新的状态——挂起态，代表进程因某些原因被暂停执行。 进程状态转换图中，加入了挂起状态后，转换关系如下图所示： \\&#96;&#96;&#96; ┌─────────┐ │ Ready │ └─────────┘ │ ┌─────────┐ ▼ ┌───────────┐ │ Running │────────────&gt;│ Suspended │ └─────────┘ │ └───────────┘ ▼ ▲ ┌─────────┐ │ │ Blocked │──────┘ └─────────┘ \\&#96;&#96;&#96; 其中，新增的挂起状态在 Ready 和 Suspended 之间，进程可以从 Ready 状态或者 Running 状态转化到挂起状态，再从挂起状态转化为 Ready 状态或者 Suspended 状态。当从 Running 状态转移到 Suspended 状态时，操作系统会将该进程的上下文信息保存在 PCB 中，以便之后再次运行该进程时，可以恢复上下文信息，继续之前的工作。 当进程处于 Suspended 状态时，如果发生了进程终止、时间片到期、进程被唤醒等事件，则会从 Suspended 状态转化为 Ready 状态，即进入就绪队列等待 CPU 调度。如果发生了进程等待事件完成的情况，则会由 Suspended 状态转化为 Blocked 状态。 总之，引入挂起状态后，进程状态的转换更加灵活和多样化，使得操作系统能够更加有效地管理和调度进程，提高计算机的资源利用率和工作效率。 7.有人说在windows中：“后台程序对应阻塞态，前台是运行态”，给出正确的说法，并结合进程状态转换进行说明答：这种说法是不正确的，Windows操作系统中的程序分为两种类型：前台程序和后台程序，它们对应的状态并不是明确的阻塞态或者运行态。实际上，程序的状态是由当前的进程活动（例如是否正在与用户交互）决定的，而与程序的前台或后台特性无关。 在Windows操作系统中，每个程序（进程）都有自己的进程状态，状态可以是运行态、就绪态、阻塞态和挂起态四种状态中的任意一种，具体状态如下： 运行态：正在执行的进程，占用 CPU 资源。 就绪态：已经处于准备运行状态，等待进入运行状态（即等待 CPU 时间片）。 阻塞态：正在等待某一事件完成后才能进行运行，如等待系统资源、等待用户输入、等待其他进程的消息等。 挂起态：处于挂起状态的进程不处于运行、就绪或阻塞状态，而是被操作系统暂停，直到恢复操作系统对其进行调度。 因此，一个前台程序可以是运行态、就绪态、阻塞态或挂起态中的任意一种，后台程序也是一样。这取决于当前进程的运行状况，而不是程序本身的前台或者后台特性。 总之，程序的前台和后台特性并不能直接对应操作系统中的进程状态，进程状态是由该进程的运行情况所决定的。 8.若系统中既没有运行进程，又没有就绪进程，系统中是否就没有进程？说明系统最多有多少运行进程，就绪进程，最少又有多少。如果是多核呢？答：即使系统中没有运行或就绪的进程，也可能存活有一些挂起或阻塞中的进程。所以，系统里面并不需要有运行或者就绪的进程，也可能存在挂起或者阻塞的进程。 在单核处理器的情况下，系统最多只能同时运行一个进程，因为在同一时间只能有一个进程运行在处理器上。而就绪态和阻塞态进程的数量是没有限制的，只受硬件及系统资源的限制。在不断切换进程的情况下，可以有多个就绪态进程等待CPU进行调度。 在多核处理器的情况下，每个CPU内核都有自己的进程调度器，多个进程可以在不同的核上并行运行，系统最多可以有多个运行态进程同时运行。但是就绪态和阻塞态进程的数量同样是没有限制的，只受硬件及系统资源的限制。 因此，在单核处理器情况下，运行态最多只有一个进程，就绪态和阻塞态进程数量不限，可以没有就绪和运行态进程，也可能有很多进程处于就绪和阻塞态等待CPU的调度。在多核处理器情况下，运行态进程最多的数量取决于核心数量，就绪态和阻塞态进程数量同样不限制。 9.什么是原语？进程控制为什么需要原语？不用原语会怎么样？答：原语（Primitive）是操作系统提供给应用程序或系统软件的一种基本操作，可以看作是一系列相关操作的集合，操作系统保证了原语的原子性和独占性，一个原语的完成不允许被其他进程打断。典型的原语有进程同步原语、进程互斥原语等等。在原语的作用下，多个进程能够进行有效的协调和同步。 进程控制需要原语的原因是，进程控制是操作系统的一个核心功能，它涉及到多个进程之间的协调，而多个进程的并发执行会引起很多问题，比如资源竞争、进程间通信等，这时候需要用到原语来解决这些问题，确保数据的一致性和进程的正确运行。例如，在进程并发访问共享资源时，如果没有互斥原语的保护，可能会导致资源竞争、死锁等问题，导致程序的异常终止或程序无法向前运行。 如果不使用原语进行进程同步和协调，可能会导致进程之间出现各种不一致和错误的情况，比如数据损坏、死锁问题等，甚至可能导致系统崩溃。使用原语，操作系统可以提供一种可靠的机制，确保多线程编程的正确性，提高系统的稳定性和安全性。 因此，原语在操作系统中是非常重要的，它们为操作系统提供了一些关键的机制，支持进程控制功能的正确实现，确保系统的高性能、高稳定性和高安全性。 10.进程有就绪队列，阻塞队列，有些系统把阻塞队列分为很多个：不同阻塞原因的进程放在不同的队列。为什么要这么做？有什么好处？答：将阻塞队列分为多个不同的队列，是为了更加精细地管理进程，提高系统的性能和效率。具体来说，这种做法可以带来以下几方面的好处： 更精细的进程管理：各个阻塞队列代表了不同类型的阻塞原因，这样可以更加精细地管理进程，针对不同的阻塞原因，采用不同的策略和优化措施，提高系统的效率和性能。 提高进程响应速度：将不同原因的阻塞进程分类管理，可以缩短进程的等待时间，快速地查找到满足条件的进程，提高进程响应速度。 降低系统开销：将阻塞队列分为若干小队列，尽可能避免了阻塞队列里进程过多导致遍历速度变慢，避免了不必要的系统开销，提高了系统的性能。 减少死锁情况的发生：不同的阻塞原因正是导致死锁的原因之一，将不同原因的阻塞进程分别管理，可以避免进程之间产生死锁问题。 总之，将阻塞队列分成多个队列，可以更加细致地管理进程，提高系统的性能和效率，降低系统开销，减少死锁情况的发生，增加系统的稳定性和可靠性。 11.Linux创建进程为什么用fork把父进程复制一份？子进程和父进程一样有意义么？Windows是不是这样创建的？这样有什么优点和缺点？答：Linux中使用fork系统调用创建进程是由于Unix及其衍生系统的设计理念之一就是“一切皆文件”，进程也不例外。在Unix操作系统下，进程是通过fork系统调用来创建的。 使用fork将父进程复制一份出来创建子进程，是为了让子进程拥有父进程的所有资源，包括内存空间、文件描述符、信号处理方式等。这就保证了子进程可以使用和修改父进程的资源，也可以独立地运行自己的代码。子进程和父进程在大小和功能上虽然相同，但实际上是两个不同的进程，各自拥有独立的内存空间和资源，相互独立运行。 Windows中创建进程的方式和Linux有所不同，Windows使用CreateProcess函数创建进程，它会根据指定的程序来创建一个新的进程，程序运行时所需的资源由新进程自己创建，不像fork方式直接将父进程复制一份。 使用fork创建进程的优点是： 能够高效地创建一个新进程，因为父进程已经有了部分资源，无需重新分配和初始化，也无需重新读取代码段等信息。 子进程可以继承父进程的所有资源，包括已打开的文件、文件锁、内存地址空间以及信号处理方式等。 实现起来比较简单，使用起来也比较方便。 使用fork创建进程的缺点是： 占用的资源更多，包括内存和CPU等资源。 子进程与父进程在一开始的时候是相同的，如果需要让它们区分开来，需要进行一些额外的处理。 总的来说，使用fork创建进程的方式能够高效地创建新的进程，且子进程可以继承父进程的资源，使用起来也相对简单，但需要注意父子进程之间的资源竞争和重复计算等问题。而Windows中创建进程的方式则不会出现这些问题，但在创建进程时需要手动设置新进程所需的资源。 12.解释Linux中的孤儿进程和僵尸进程：是进程的什么状态？怎么产生的，有什么作用，危害，演示两种进程答：在Linux中，孤儿进程和僵尸进程都是进程的一种状态。 孤儿进程是指其父进程已经退出（或被杀死），而子进程还在运行的进程。此时，操作系统会将孤儿进程的父进程设置为init进程，让其接管子进程的后续处理工作。孤儿进程并不会影响系统的正常运行，其存在也不会对其他进程造成威胁。 而僵尸进程则是指进程已经结束，但其父进程没有回收其资源。在这种情况下，该进程的PCB（进程控制块）等信息会保留在系统中一段时间，占用系统资源，导致进程数目增多，从而降低系统的可用性和性能。 产生孤儿进程的原因通常是父进程先于子进程退出，导致子进程成为孤儿进程。而僵尸进程通常是因为父进程没有及时回收已退出的子进程，或者父进程本身也退出了，让子进程变成孤儿进程，最终变成僵尸进程。操作系统会自动帮助我们回收子进程的资源，但如果父进程一直没有处理，这些子进程的资源就不会被回收，最终形成僵尸进程。 孤儿进程相比于僵尸进程来说，影响相对较小。而僵尸进程的存在会浪费系统资源，导致系统性能下降。 下面演示一下两种进程（Python语言）： python import os import time # 创建子进程 pid = os.fork() # 如果 pid 为 0，则是子进程 if pid == 0: print(\"I am child process and my pid is:\", os.getpid()) else: # 父进程执行此内容 print(\"I am parent process and my pid is:\", os.getpid()) # 等待子进程结束，子进程成为僵尸进程 time.sleep(5) 在上面的代码中，我们使用了fork创建了一个子进程，如果pid为0，则是子进程，否则是父进程。父进程等待5秒钟，此时子进程结束，但父进程却没有回收其资源，从而形成了僵尸进程。 13.解释和说明使用fork创建10个进程的方法：一个父进程创建10个子进程；或者子进程继续创建子进程。答：使用fork创建10个进程的方法可以通过以下两种方式实现： 一个父进程创建10个子进程： import os for i in range(10): pid = os.fork() if pid == 0: print(\"I am child %d and my pid is %d\" % (i+1, os.getpid())) exit(0) 在这种方式中，我们使用了for循环来创建10个子进程，每个子进程输出自己的编号和进程ID。为了避免子进程也创建新的子进程，我们使用了exit(0)来让子进程结束自己的运行。 子进程继续创建子进程： import os def create_process(num): if num == 1: print(\"I am the first child process and my pid is:\", os.getpid()) else: pid = os.fork() if pid == 0: print(\"I am child process %d and my pid is %d, my parent pid is %d\" % (num, os.getpid(), os.getppid())) else: os.wait() print(\"Child process %d has terminated\" % num) exit(0) # 创建第一个子进程 create_process(1) 在这种方式中，我们首先创建第一个子进程，然后在create_process函数中，每个子进程都会创建一个新的子进程，直到创建了10个子进程。每个子进程输出自己的编号、进程ID，以及自己的父进程ID。子进程结束时，会输出子进程编号，然后退出自己的运行。 这两种方式的主要区别在于，第一种方式是父进程创建子进程，而第二种方式是子进程自己继续创建新的子进程。在实际应用中，可以根据具体的需求选择合适的方式来创建多个进程。 14.浅度睡眠和深度睡眠(TASK_INTERRUPTIBLE TASK_UNINTERRUPTIBLE)的区别和联系？为什么需要区分？他们的应用场景？能不能把他们合二为一？答：浅度睡眠和深度睡眠是Linux操作系统中进程休眠的两种方式，其中浅度睡眠也称为可中断睡眠（TASK_INTERRUPTIBLE），深度睡眠也称为不可中断睡眠（TASK_UNINTERRUPTIBLE）。 两种睡眠状态的区别在于，可中断睡眠的进程可以被信号打断而唤醒，而不可中断睡眠的进程则不会被信号打断而唤醒。通常，进程在执行等待某些事件的操作时，会进入睡眠状态，等到事件发生时被唤醒。 区分浅度睡眠和深度睡眠是为了提高系统效率和避免死锁等问题。因为在等待某些事件时，如果进程一直处于可中断睡眠状态，当出现新的事件时，系统不需要进行额外的操作就可以让进程立即被唤醒，从而提高了系统的响应速度。而不可中断睡眠状态适用于等待某些关键资源，这些资源必须被保证一直可用，如果被其他进程占用或者破坏，可能导致系统不稳定或者崩溃。 它们的应用场景如下： - 可中断睡眠常常在等待一些不是很重要的资源时使用，例如需要读取网络数据或者等待I&#x2F;O设备响应等。 - 不可中断睡眠常常在等待系统中非常重要的资源或者高优先级的操作时使用，例如等待文件系统上的某个块或者等待磁盘I&#x2F;O完成等。 将浅度睡眠和深度睡眠合二为一是不可取的。因为这样会影响对资源的细致管理和对系统效率的提升。例如，如果我希望等待某个关键资源始终可用，那么我需要使得进程进入不可中断睡眠状态。如果将这个状态合并到可中断睡眠中就会导致在等待不重要资源时也处于不可中断睡眠状态，这会导致系统的资源浪费和效率降低。因此，需要根据具体情况选择不同的睡眠状态。 四.线程概念和临界区1.同时“画圆”和“画方”，视频是讲用2个线程。如果2个进程，能不能同时“画圆”和“画方”？为什么？答：在理论上，两个进程也可以同时“画圆”和“画方”，但实现的难度较大，并且存在更多的问题。主要是由于进程之间的通信和同步需要额外的工作。 如果两个进程分别执行“画圆”和“画方”这两个任务，则需要通过共享内存、消息队列、信号量等机制进行进程间通信，以便将相关数据和控制信息从一个进程传递到另一个进程中。 同时，需要考虑进程之间的同步问题。由于进程是独立的执行流，因此不能像线程那样使用锁或条件变量来实现同步。可以使用信号量、管道等机制实现进程之间的同步。 总之，虽然在理论上两个进程也可以同时“画圆”和“画方”，但是由于需要进行额外的进程间通信和同步，以及实现复杂度较高的并发控制，因此一般情况下使用多线程来实现并发任务更加简单和高效。 2.线程相对于进程的优点，缺点？答：线程相对于进程的优点： 轻量级：线程比进程更加轻量，线程的创建、销毁和切换所需的时间更短，占用的系统资源更少。 共享数据：在同一个进程中的所有线程之间可以共享数据，因为它们都在同一个进程的内存空间中，而不需要像进程那样使用IPC机制来进行进程间通信。 资源共享和切换效率高：由于线程不像进程那样需要拷贝内存空间和文件句柄等资源，所以线程的切换效率更高，而且同一进程中的线程可以共享系统资源。 更快的响应时间：由于线程的创建、销毁和切换所需的时间更短，而且线程之间的通信更加高效，所以线程可以比进程更快地响应用户的请求。 线程相对于进程的缺点： 容易形成死锁：由于不同的线程可以共享同一块内存空间和资源，所以需要进行严格的同步操作，否则就容易形成死锁。 切换复杂度高：线程的切换需要保证共享资源的安全性和正确性，需要进行更多的控制和同步操作，因此线程的编程和调试难度较大。 编程难度较高：在多线程编程中，需要考虑很多同步和通信的问题，同时需要避免一些由于线程之间的竞争造成的问题，因此编程难度比单线程编程更高。 容易受到并发问题的影响：同一进程中的线程之间共享资源，容易造成线程之间的竞争而导致并发问题，如死锁、信号量竞争等。 综上所述，虽然线程相比进程具有一些优点，但是在使用线程的过程中，需要注意同步和通信的问题，避免产生并发问题，并且需要进行较多的复杂编程和调试工作。同时，线程也无法做到和进程完全分离的隔离，因此需要在具体的应用场景中结合实际情况来选择使用线程还是进程。 3.用户级线程和内核级线程的区别答：用户级线程和内核级线程是多线程编程中的两种不同实现方式，它们的区别如下： 实现方式不同。用户级线程是由用户程序库实现的多线程，不需要内核的支持，因此它是基于用户空间的。内核级线程是由操作系统内核支持的多线程，需要使用系统调用来创建和管理线程。 线程调度不同。用户级线程的调度是由用户进程自己负责的，所以线程切换的代价比较小。内核级线程的调度是由操作系统内核负责的，因此线程切换的代价比较大，需要进行上下文的切换和内核态和用户态之间的转换。 上下文切换的开销不同。用户级线程的上下文切换只是在用户空间中进行的，因此开销比较小。内核级线程的上下文切换要经过内核的介入，因此开销比较大。 线程间通信的实现方式不同。由于用户级线程是在用户空间中实现的，线程之间的通信需要使用用户空间的机制，如信号量、管道和共享内存等。而内核级线程的通信需要使用内核空间的机制，如进程间通信(IPC)等。 可靠性不同。由于内核级线程是由操作系统内核进行管理的，因此它具有更高的可靠性和稳定性。而由于用户级线程是由用户程序库进行管理的，因此它的可靠性和稳定性较低。 总之，用户级线程和内核级线程的主要区别在于实现方式、调度、上下文切换的开销、线程间通信的实现方式和可靠性等方面，开发人员需要根据具体应用场景和需求选择使用哪种实现方式。 4.展示多线程编程：全局变量初始值为0，5个线程每个分别+1，5个线程每个分别-1，输出结果答：下面是一个用C++实现多线程的例子，实现了全局变量加减的操作： #include &lt;iostream&gt; #include &lt;thread&gt; #include &lt;mutex&gt; &#x2F;&#x2F; 全局变量 volatile int global_var &#x3D; 0; &#x2F;&#x2F; 互斥锁 std::mutex mtx; &#x2F;&#x2F; 加操作 void add_operation() &#123; for (int i &#x3D; 0; i &lt; 1000000; i++) &#123; mtx.lock(); global_var++; mtx.unlock(); &#125; &#125; &#x2F;&#x2F; 减操作 void dec_operation() &#123; for (int i &#x3D; 0; i &lt; 1000000; i++) &#123; mtx.lock(); global_var--; mtx.unlock(); &#125; &#125; int main() &#123; &#x2F;&#x2F; 创建加和减的线程 std::thread add_threads[5]; std::thread dec_threads[5]; &#x2F;&#x2F; 启动加和减的线程 for (int i &#x3D; 0; i &lt; 5; i++) &#123; add_threads[i] &#x3D; std::thread(add_operation); dec_threads[i] &#x3D; std::thread(dec_operation); &#125; &#x2F;&#x2F; 等待线程结束 for (int i &#x3D; 0; i &lt; 5; i++) &#123; add_threads[i].join(); dec_threads[i].join(); &#125; &#x2F;&#x2F; 输出全局变量 std::cout &lt;&lt; &quot;global_var: &quot; &lt;&lt; global_var &lt;&lt; std::endl; return 0; &#125; 在上述代码中，我们使用了C++的标准线程库，定义了两个函数add_operation()和dec_operation()，分别执行加操作和减操作，每个线程执行1000000次。使用互斥锁保证线程之间的顺序和操作的正确性。最后输出全局变量的值。由于存在线程之间的竞争和并发问题，因此输出的值可能不是0。 5.什么是临界资源？举例哪些是临界资源，哪些不是？答：临界资源是指在多线程编程中，多个线程同时访问可能导致数据不一致性的共享资源。当且仅当在同一时刻只能被一个线程所操作的共享资源就是临界资源。此时需要使用同步机制（如互斥量、条件变量等）来保证线程安全。 临界资源的一个重要特点是它的访问必须是互斥的（Mutual Exclusion），即同一时刻只能被一个线程访问或修改。常见的临界资源包括：共享内存、共享数据结构、系统中的网络或IO信息等。例如： 全局变量：在多个线程之间共享的全局变量通常是临界资源，因为多个线程修改全局变量时需要采用同步机制进行互斥访问，否则可能会产生竞态异常。 临时变量：线程函数内的私有变量，每个线程之间互不干扰，因此不是临界资源。 函数局部变量：每个线程之间，在各自的函数栈空间内，私有独立，线程之间不会产生冲突，也不是临界资源。 堆内存和栈内存：存储指针或引用的内存区间可能是临界资源，因为多个线程有可能同时使用该指针或引用，且访问的对象可能互相影响，需要通过同步机制进行访问控制。 文件及数据流：多个线程的文件访问会产生竞争，因此文件及数据流也属于临界资源。 总之，临界资源是多线程编程过程中需要关注的重要问题，需要开发人员仔细分析需要同步和保护的资源，制定相应的同步规则和机制，以保证线程的正确并发执行。 6.什么是临界区？举例说明哪些是临界区，临界区的大小，临界区的数量答：临界区是指一个共享资源被多个并发进程或线程同时访问时，可能引发冲突的代码区域。在这个区域内，任意两个进程或线程都不能同时访问共享资源，否则会出现不可预期的结果。 以下是一些举例说明临界区的情况： 多个进程或线程同时读写同一个全局变量。 多个进程或线程同时向同一个文件写入数据。 多个进程或线程同时访问同一个数据库的某个表。 临界区的大小取决于代码的具体实现和所涉及的共享资源。例如，在第一个例子中，临界区包含对全局变量进行读写的代码行。在第二个例子中，临界区包含向文件写入数据的代码行。在第三个例子中，临界区包含对数据库表进行读写的代码行。 临界区的数量也取决于代码的实现和所涉及的共享资源。每个共享资源都可能有一个或多个临界区，这取决于多少个进程或线程需要访问该资源以及如何访问它。因此，具体情况可能会有所不同。 7.教材p117，代码4-26，这种方式保护临界区有何问题？如下图进行说明提示：在某个地方切换，会不满足“忙则等待”。答：变量flag没有进行同步保护：多个线程可能同时访问flag变量，如果不进行同步保护，可能会导致竞态条件（Race Condition）的发生，进而导致线程安全问题。while循环中没有进行休眠操作：如果flag变量一直为true，while循环会一直占用CPU资源，导致系统负载过高。g变量的读写操作没有进行同步保护：多个线程可能同时访问g变量，如果不进行同步保护，可能会导致竞态条件的发生，进而导致线程安全问题。临界区的长度过长：临界区包含了while循环和if语句，且包含了对多个共享变量的访问，临界区的长度过长，会降低程序的并发性能。 8.2个线程同步对g操作，在某个地方切换，不满足“空闲让进”答：空闲让进：当没有任何进程处于临界区的时候，即没有任何进程正在访问临界资源，此时任何访问临界资源的进程都能进入临界区。2个线程同步对g操作，在某个程序段发生了切换，但没有执行空闲让进操作，即此时这段临界区无线程访问。则可能导致进程崩溃或者线程死锁。因此必须设定合理的锁和同步进制，保证线程有序地访问临界资源。同时应该遵循访问临界区的四个准则：忙则等待，空闲让进，优先等待，让权等待，保证程序处于安全的状态。 五.同步互斥和锁机制1.分析：PV解决互斥的视频中，mutex&#x3D;2时，结果是怎样的答：对于PV问题，P表示生产者，V表示消费者。其中，mutex表示生产者和消费者之间的互斥量，用来保证生产者和消费者之间的同步。 在PV问题中，当mutex&#x3D;2时，可能存在一些问题，具体情况取决于问题的具体实现。一般来说，mutex&#x3D;2时，可能会出现以下几种情况： 死锁：如果生产者和消费者都等待对方释放mutex，那么就会出现死锁的情况。此时，程序无法继续执行，需要通过增加互斥量的数量或修改程序逻辑来解决。 非法访问：如果多个生产者或消费者同时访问共享资源，那么就可能会出现非法访问的情况，导致程序崩溃或数据损坏。此时，需要增加互斥量的数量或修改程序逻辑来解决。 正常执行：如果互斥量的数量是正确的，那么程序就可以正常执行，生产者和消费者之间可以正确地同步，保证共享资源的安全访问。 总之，在PV问题中，正确设置互斥量的数量非常重要，可以有效地避免死锁和非法访问等问题，保证程序的正常运行。 2.生产者消费者问题，改成1个生产者，1个消费者，1个缓冲区答：下面是一个简单的C++代码示例，实现了一个生产者消费者问题，其中有一个生产者、一个消费者和一个缓冲区。在这个示例中，缓冲区使用一个队列来保存生产者产生的数据。 #include &lt;iostream&gt; #include &lt;queue&gt; #include &lt;thread&gt; #include &lt;mutex&gt; #include &lt;condition_variable&gt; using namespace std; const int BUFFER_SIZE &#x3D; 5; queue&lt;int&gt; buffer; mutex mtx; condition_variable cond_var; void producer() &#123; int num &#x3D; 0; while (true) &#123; unique_lock&lt;mutex&gt; lock(mtx); while (buffer.size() &#x3D;&#x3D; BUFFER_SIZE) &#123; &#x2F;&#x2F; 缓冲区已满，等待消费者消费 cond_var.wait(lock); &#125; &#x2F;&#x2F; 生产者生产数据 buffer.push(num++); cout &lt;&lt; &quot;Producer produced &quot; &lt;&lt; num &lt;&lt; endl; &#x2F;&#x2F; 通知消费者可以消费 cond_var.notify_one(); &#125; &#125; void consumer() &#123; while (true) &#123; unique_lock&lt;mutex&gt; lock(mtx); while (buffer.empty()) &#123; &#x2F;&#x2F; 缓冲区为空，等待生产者生产 cond_var.wait(lock); &#125; &#x2F;&#x2F; 消费者消费数据 int num &#x3D; buffer.front(); buffer.pop(); cout &lt;&lt; &quot;Consumer consumed &quot; &lt;&lt; num &lt;&lt; endl; &#x2F;&#x2F; 通知生产者可以生产 cond_var.notify_one(); &#125; &#125; int main() &#123; thread t1(producer); thread t2(consumer); t1.join(); t2.join(); return 0; &#125; 在这个代码中，生产者线程和消费者线程都处于一个无限循环中。当生产者线程生产完数据后，会通知消费者线程可以消费，然后等待消费者线程消费完数据后再继续生产；当消费者线程消费完数据后，会通知生产者线程可以继续生产，然后等待生产者线程生产完数据后再继续消费。 其中，使用了互斥量mtx来保证在访问缓冲区时的线程安全，使用了条件变量cond_var来实现生产者和消费者之间的同步。当缓冲区已满时，生产者线程会调用cond_var.wait(lock)来等待消费者线程消费数据，此时会释放mtx，进入睡眠状态；当缓冲区为空时，消费者线程会调用cond_var.wait(lock)来等待生产者线程生产数据，此时会释放mtx，进入睡眠状态。当生产者生产完数据后，会调用cond_var.notify_one()来通知一个正在等待的消费者线程可以消费；当消费者消费完数据后，会调用cond_var.notify_one()来通知一个正在等待的生产者线程可以生产。 3.生产者消费者问题，改成多个生产者，一个消费者答：下面是一个简单的C++代码示例，实现了一个生产者消费者问题，其中有多个生产者和一个消费者。在这个示例中，缓冲区使用一个队列来保存生产者产生的数据。 #include &lt;iostream&gt; #include &lt;queue&gt; #include &lt;thread&gt; #include &lt;mutex&gt; #include &lt;condition_variable&gt; using namespace std; const int BUFFER_SIZE &#x3D; 5; queue&lt;int&gt; buffer; mutex mtx; condition_variable cond_var; void producer(int id) &#123; int num &#x3D; id * 10; while (true) &#123; unique_lock&lt;mutex&gt; lock(mtx); while (buffer.size() &#x3D;&#x3D; BUFFER_SIZE) &#123; &#x2F;&#x2F; 缓冲区已满，等待消费者消费 cond_var.wait(lock); &#125; &#x2F;&#x2F; 生产者生产数据 buffer.push(num++); cout &lt;&lt; &quot;Producer &quot; &lt;&lt; id &lt;&lt; &quot; produced &quot; &lt;&lt; num &lt;&lt; endl; &#x2F;&#x2F; 通知消费者可以消费 cond_var.notify_one(); lock.unlock(); this_thread::sleep_for(chrono::milliseconds(1000)); &#125; &#125; void consumer() &#123; while (true) &#123; unique_lock&lt;mutex&gt; lock(mtx); while (buffer.empty()) &#123; &#x2F;&#x2F; 缓冲区为空，等待生产者生产 cond_var.wait(lock); &#125; &#x2F;&#x2F; 消费者消费数据 int num &#x3D; buffer.front(); buffer.pop(); cout &lt;&lt; &quot;Consumer consumed &quot; &lt;&lt; num &lt;&lt; endl; &#x2F;&#x2F; 通知生产者可以生产 cond_var.notify_one(); lock.unlock(); this_thread::sleep_for(chrono::milliseconds(1000)); &#125; &#125; int main() &#123; const int NUM_PRODUCERS &#x3D; 3; thread producers[NUM_PRODUCERS]; for (int i &#x3D; 0; i &lt; NUM_PRODUCERS; i++) &#123; producers[i] &#x3D; thread(producer, i); &#125; thread consumer_thread(consumer); for (int i &#x3D; 0; i &lt; NUM_PRODUCERS; i++) &#123; producers[i].join(); &#125; consumer_thread.join(); return 0; &#125; 在这个代码中，有多个生产者线程和一个消费者线程，生产者线程通过传入的id来区分不同的生产者。当生产者线程生产完数据后，会通知消费者线程可以消费，然后等待消费者线程消费完数据后再继续生产；当消费者线程消费完数据后，会通知生产者线程可以继续生产，然后等待生产者线程生产完数据后再继续消费。 其中，使用了互斥量mtx来保证在访问缓冲区时的线程安全，使用了条件变量cond_var来实现生产者和消费者之间的同步。当缓冲区已满时，生产者线程会调用cond_var.wait(lock)来等待消费者线程消费数据，此时会释放mtx，进入睡眠状态；当缓冲区为空时，消费者线程会调用cond_var.wait(lock)来等待生产者线程生产数据，此时会释放&#96; 4.生产者消费者问题，修改限制：生成者和消费者可以同时进入缓冲区答：在原先的生产者消费者问题中，生产者和消费者必须轮流地进入缓冲区，这会导致一些不必要的等待。如果我们允许生产者和消费者同时进入缓冲区，就可以更高效地利用资源。下面是一个简单的C++代码示例，实现了一个允许生产者和消费者同时进入缓冲区的生产者消费者问题。 #include &lt;iostream&gt; #include &lt;queue&gt; #include &lt;thread&gt; #include &lt;mutex&gt; #include &lt;condition_variable&gt; using namespace std; const int BUFFER_SIZE &#x3D; 5; queue&lt;int&gt; buffer; mutex mtx; condition_variable cond_var; void producer(int id) &#123; int num &#x3D; id * 10; while (true) &#123; unique_lock&lt;mutex&gt; lock(mtx); while (buffer.size() &#x3D;&#x3D; BUFFER_SIZE) &#123; &#x2F;&#x2F; 缓冲区已满，等待消费者消费 cond_var.wait(lock); &#125; &#x2F;&#x2F; 生产者生产数据 buffer.push(num++); cout &lt;&lt; &quot;Producer &quot; &lt;&lt; id &lt;&lt; &quot; produced &quot; &lt;&lt; num &lt;&lt; endl; &#x2F;&#x2F; 通知消费者可以消费 cond_var.notify_one(); lock.unlock(); &#x2F;&#x2F; 生产者进入缓冲区 this_thread::sleep_for(chrono::milliseconds(500)); &#125; &#125; void consumer(int id) &#123; while (true) &#123; unique_lock&lt;mutex&gt; lock(mtx); if (buffer.empty()) &#123; &#x2F;&#x2F; 缓冲区为空，等待生产者生产 cond_var.wait(lock); &#125; else &#123; &#x2F;&#x2F; 消费者消费数据 int num &#x3D; buffer.front(); buffer.pop(); cout &lt;&lt; &quot;Consumer &quot; &lt;&lt; id &lt;&lt; &quot; consumed &quot; &lt;&lt; num &lt;&lt; endl; &#x2F;&#x2F; 通知生产者可以生产 cond_var.notify_one(); lock.unlock(); &#x2F;&#x2F; 消费者进入缓冲区 this_thread::sleep_for(chrono::milliseconds(500)); &#125; &#125; &#125; int main() &#123; const int NUM_PRODUCERS &#x3D; 3; const int NUM_CONSUMERS &#x3D; 2; thread producers[NUM_PRODUCERS]; for (int i &#x3D; 0; i &lt; NUM_PRODUCERS; i++) &#123; producers[i] &#x3D; thread(producer, i); &#125; thread consumers[NUM_CONSUMERS]; for (int i &#x3D; 0; i &lt; NUM_CONSUMERS; i++) &#123; consumers[i] &#x3D; thread(consumer, i); &#125; for (int i &#x3D; 0; i &lt; NUM_PRODUCERS; i++) &#123; producers[i].join(); &#125; for (int i &#x3D; 0; i &lt; NUM_CONSUMERS; i++) &#123; consumers[i].join(); &#125; return 0; &#125; 在这个代码中，有多个生产者线程和一个消费者线程，生产者线程通过传入的id来区分不同的生产者。当生产者线程生产完数据后，会通知消费者线程可以消费，然后等待消费者线程消费完数据后再继续生产；当消费者线程消费完数据后，会通知生产者线程可以继续生产，然后等待生产者线程生产完数据后再继续消费。 5.生产者消费者问题，生产者两个P操作( P(empty) 和 P(mutex) )交换，其他不变，会是怎样的结果？答：在标准的生产者消费者问题中，通常使用两个信号量empty和full来表示缓冲区的状态。其中，empty表示缓冲区为空的资源数，当生产者向缓冲区中生产数据时，需要获取empty信号量，如果empty信号量为0，则生产者需要等待；full表示缓冲区为满的资源数，当消费者从缓冲区中消费数据时，需要获取full信号量，如果full信号量为0，则消费者需要等待。 如果将生产者的两个P操作( P(empty) 和 P(mutex) )交换，其他不变，会导致以下问题： 生产者在获取empty信号量之前，已经获取了mutex互斥信号量，这意味着生产者可以访问缓冲区，但是缓冲区可能已经满了，如果此时生产者向缓冲区中写入数据，会导致数据覆盖和丢失。 如果生产者获取了empty信号量之后，才去获取mutex互斥信号量，那么生产者在获取mutex信号量之前，其他生产者或消费者可能已经访问了缓冲区，此时生产者需要等待，这样会导致生产者无法及时将数据写入缓冲区，从而降低系统的效率。 因此，交换生产者的两个P操作( P(empty) 和 P(mutex) )会导致生产者在访问缓冲区时存在问题，可能会导致数据不一致或竞态条件的问题。 6.生产者消费者问题，生产者两个P操作和消费者两个P操作同时交换顺序，会是怎样的结果?答：如果将生产者的两个P操作和消费者的两个P操作同时交换顺序，会导致以下问题： 生产者先执行P(mutex)操作，获取了缓冲区的互斥信号量，但此时缓冲区可能已经满了，如果生产者此时向缓冲区中写入数据，会导致数据覆盖和丢失。 消费者先执行P(empty)操作，获取了缓冲区的空闲资源数，但此时缓冲区可能为空，如果消费者此时从缓冲区中读取数据，会导致读取到错误的数据或者出现死锁的情况。 因此，生产者的两个P操作和消费者的两个P操作同时交换顺序是不正确的，可能会导致生产者和消费者无法正常访问缓冲区，从而导致系统的异常和效率降低。 7.用信号量实现前驱图：假设以下6个进程，每个进程中某个时刻要执行的运算语句如下： S1: a = 3+4； S2: b = 2+1； S3: c = a-b； S4: w = c+1； S5: t = c+a S6: z = w+t 信号量实现进程的前趋关系 提示：第1步，画出前驱图；第2步：图上写出信号量；第3步：伪代码写出程序 答：前驱图如下所示： P1 P2 P3 P4 P5 P6 | | | | | | S1 S2 S3 S4 S5 S6 | | | | | | +---->---+--->----+--->----+--->----+--->----+ 根据前驱图，可以定义以下信号量： sem1：用于P2等待P1执行完S1。 sem2：用于P3等待P1和P2执行完S1和S2。 sem3：用于P4等待P3执行完S3。 sem4：用于P5等待P3和P4执行完S3和S4。 sem5：用于P6等待P4和P5执行完S4和S5。 根据以上信号量，可以写出如下伪代码程序： scssCopy codesemaphore sem1 = 0; // 初始化为0 semaphore sem2 = 0; // 初始化为0 semaphore sem3 = 0; // 初始化为0 semaphore sem4 = 0; // 初始化为0 semaphore sem5 = 0; // 初始化为0 process P1 &#123; S1; V(sem1); // S1执行完后释放sem1 &#125; process P2 &#123; P(sem1); // 等待sem1 S2; V(sem2); // S2执行完后释放sem2 &#125; process P3 &#123; P(sem1); // 等待sem1 P(sem2); // 等待sem2 S3; V(sem3); // S3执行完后释放sem3 &#125; process P4 &#123; P(sem3); // 等待sem3 S4; V(sem4); // S4执行完后释放sem4 &#125; process P5 &#123; P(sem3); // 等待sem3 P(sem4); // 等待sem4 S5; V(sem5); // S5执行完后释放sem5 &#125; process P6 &#123; P(sem4); // 等待sem4 P(sem5); // 等待sem5 S6; &#125; 在上述程序中，每个进程在执行到需要等待的语句时，会通过P操作来等待其前驱进程完成，通过V操作来唤醒其后继进程。每个进程在完成任务后，会释放相应的信号量，以允许其后继进程继续执行。 8.过桥问题：独木桥，同一方向的行人可连续过桥，当某一方向有人过桥时，另一方向的行人必须等待；当某一方向无人过桥时，另一方向的行人可以过桥。将独木桥的两个方向分别标记为 A 和 B；两个进程分别是PA和PB。用PV操作性，写出伪代码，解决过桥问题。答：以下是使用PV操作解决过桥问题的伪代码： // 初始化过桥状态为A方向 state = \"A\" // 定义计数信号量 num_people_on_bridge = 0 mutex = 1 // 定义PV操作函数 function P(semaphore): while semaphore &lt;= 0: // 等待信号量可用 semaphore -= 1 function V(semaphore): semaphore += 1 // 定义A方向过桥函数 function cross_bridge_A(): P(mutex) while num_people_on_bridge > 0 or state == \"B\": // 等待A方向可以过桥的状态 V(mutex) P(mutex) num_people_on_bridge += 1 state = \"B\" V(mutex) // 过桥操作 // ... P(mutex) num_people_on_bridge -= 1 if num_people_on_bridge == 0: state = \"A\" V(mutex) // 定义B方向过桥函数 function cross_bridge_B(): P(mutex) while num_people_on_bridge > 0 or state == \"A\": // 等待B方向可以过桥的状态 V(mutex) P(mutex) num_people_on_bridge += 1 state = \"A\" V(mutex) // 过桥操作 // ... P(mutex) num_people_on_bridge -= 1 if num_people_on_bridge == 0: state = \"B\" V(mutex) // 初始化行人数组 people = [\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\"] // 启动过桥进程 for i = 1 to length(people): if people[i][0] == \"A\": start_process(cross_bridge_A) else: start_process(cross_bridge_B) 在上述代码中，使用一个计数信号量 num_people_on_bridge 来记录桥上的人数，使用一个互斥信号量 mutex 来保证多个进程不会同时修改共享变量。state 变量用于记录当前过桥的方向，A 或 B。在过桥前，每个进程会先等待当前方向可以过桥的状态，然后执行过桥操作，并在过桥后更新桥上的人数和当前过桥的方向。最后，所有行人的过桥操作在多个进程中并发执行。 9.独木桥问题继续：桥最多承载M个人，如何解决?答：以下是使用PV操作解决过桥问题，并且限制桥最多承载M个人的伪代码： // 初始化过桥状态为A方向 state = \"A\" // 定义计数信号量和限制信号量 num_people_on_bridge = 0 max_people_on_bridge = M mutex = 1 // 定义PV操作函数 function P(semaphore): while semaphore &lt;= 0: // 等待信号量可用 semaphore -= 1 function V(semaphore): semaphore += 1 // 定义A方向过桥函数 function cross_bridge_A(): P(mutex) while num_people_on_bridge >= max_people_on_bridge or state == \"B\": // 等待A方向可以过桥的状态 V(mutex) P(mutex) num_people_on_bridge += 1 state = \"B\" V(mutex) // 过桥操作 // ... P(mutex) num_people_on_bridge -= 1 if num_people_on_bridge == 0: state = \"A\" V(mutex) // 定义B方向过桥函数 function cross_bridge_B(): P(mutex) while num_people_on_bridge >= max_people_on_bridge or state == \"A\": // 等待B方向可以过桥的状态 V(mutex) P(mutex) num_people_on_bridge += 1 state = \"A\" V(mutex) // 过桥操作 // ... P(mutex) num_people_on_bridge -= 1 if num_people_on_bridge == 0: state = \"B\" V(mutex) // 初始化行人数组 people = [\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\"] // 启动过桥进程 for i = 1 to length(people): if people[i][0] == \"A\": start_process(cross_bridge_A) else: start_process(cross_bridge_B) 在上述代码中，增加了一个限制信号量 max_people_on_bridge，用于限制桥上最多可以承载多少人。在过桥前，每个进程会先等待当前方向可以过桥的状态和桥上人数没有超过限制的状态，然后执行过桥操作，并在过桥后更新桥上的人数和当前过桥的方向。最后，所有行人的过桥操作在多个进程中并发执行。 需要注意的是，如果桥上的人数已经达到了限制，则进程需要等待另一个方向的进程先过桥，以保证桥上的人数不会超过限制。 10.对应同步机制4个准则，讲解peterson算法答：Peterson算法是一种经典的用于实现共享资源的互斥访问的算法，它是由Computer Science领域的Gary L. Peterson在1981年提出的。Peterson算法是一种软件解决方案，因此它不需要硬件支持，而且它比硬件实现的解决方案更具有可移植性和灵活性。 Peterson算法遵循了同步机制的四个准则： 互斥访问：任何时刻只有一个进程可以访问共享资源。 空闲让进：如果没有进程访问共享资源，则任何试图访问共享资源的进程都可以立即访问。 忙则等待：如果有进程正在访问共享资源，则试图访问共享资源的进程必须等待。 有限等待：如果没有进程正在访问共享资源，则进程必须有限时间内进入临界区。 Peterson算法的核心是使用两个变量 turn 和 flag 来保证互斥访问。其中，turn 变量表示当前访问共享资源的进程，flag 变量表示当前进程是否要访问共享资源。当一个进程想要访问共享资源时，它会设置 flag 为 true，并将 turn 设置为另一个进程的编号。然后，它会进入一个循环，等待另一个进程的 flag 为 false，并且 turn 为自己的编号。如果等待成功，进程就可以进入临界区，访问共享资源。当访问结束后，进程会将 flag 设置为 false，表示不再需要访问共享资源。 以下是Peterson算法的伪代码： // 定义两个进程的编号，这里假设进程0和进程1要访问共享资源 const int P0 = 0; const int P1 = 1; // 定义两个标志变量和一个turn变量 bool flag[2] = &#123;false, false&#125;; int turn = P0; // 进程0想要访问共享资源 flag[P0] = true; turn = P1; while (flag[P1] &amp;&amp; turn == P1) &#123; // 等待进程1释放共享资源 &#125; // 进入临界区，访问共享资源 ... // 退出临界区，释放共享资源 flag[P0] = false; // 进程1想要访问共享资源 flag[P1] = true; turn = P0; while (flag[P0] &amp;&amp; turn == P0) &#123; // 等待进程0释放共享资源 &#125; // 进入临界区，访问共享资源 ... // 退出临界区，释放共享资源 flag[P1] = false; 以上代码中，flag 数组表示进程是否想要访问共享资源，turn 变量表示当前的进程编号。当进程想要访问共享资源时，它会先将自己的 flag 设置为 true，并将 turn 设置为另一个进程的编号。然后，它会进入一个循环，等待另一个进程的 flag 为 false，并且 turn 为自己的编号。如果等待成功，进程就可以进入临界区，访问共享资源。当访问结束后，进程会将自己的 flag 设置为 false，表示不再需要访问共享资源。 需要注意的是，Peterson算法可以保证互斥访问，但是它不能保证公平性。即使一个进程一直在等待，也不能保证下一个进程一定会获得访问共享资源的机会。因此，在实际应用中，我们可能需要使用更加高级的算法来保证公平性。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://xp_ww.gitee.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://xp_ww.gitee.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"OS","slug":"OS","permalink":"https://xp_ww.gitee.io/tags/OS/"}]},{"title":"欢迎您，请进🏝️🏝️🏝️","slug":"欢迎您","date":"2023-09-27T10:08:44.000Z","updated":"2023-10-11T13:39:46.686Z","comments":true,"path":"blog/208761566.html","link":"","permalink":"https://xp_ww.gitee.io/blog/208761566.html","excerpt":"","text":"欢迎来到苏禾的个人博客网站友友们，大家好呀！🫶🫶🫶 感谢您百忙之中抽出宝贵的时间，来逛我的博客网站😝😝，既然来了先考大家一道Java题目吧，别打我😘😘😘 class Value &#123; public int i = 15; &#125; public class Test &#123; public static void main(String args[]) &#123; Test t = new Test(); t.first(); &#125; public void first() &#123; int i = 5; Value v = new Value(); v.i = 25; second(v,i); System.out.println(v.i); &#125; public void second(Value v,int i) &#123; i = 0; v.i = 20; Value val = new Value(); v = val; System.out.println(v.i + \" \" + i); &#125; &#125; 答案是：15 0 20 聪明的你一定答对了吧！💮💮💮 到此为止，我就说说写这个博客网站的意义吧！！！🏝️🏝️🏝️ 首先我可以用这个记笔记 📝📝📝 其次可以和大家分享，交流，学习，共同进步 💪💪💪 最后，可以装x 🤪🤪🤪 技术不精，可能网站还有很多问题，大家海涵！！！❤️❤️❤️","categories":[],"tags":[{"name":"WelCome","slug":"WelCome","permalink":"https://xp_ww.gitee.io/tags/WelCome/"}]}],"categories":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/categories/nginx/"},{"name":"Docker","slug":"Docker","permalink":"https://xp_ww.gitee.io/categories/Docker/"},{"name":"java八股文之JavaSE","slug":"java八股文之JavaSE","permalink":"https://xp_ww.gitee.io/categories/java%E5%85%AB%E8%82%A1%E6%96%87%E4%B9%8BJavaSE/"},{"name":"java工具类","slug":"java工具类","permalink":"https://xp_ww.gitee.io/categories/java%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"Web应用开发","slug":"Web应用开发","permalink":"https://xp_ww.gitee.io/categories/Web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"},{"name":"算法","slug":"算法","permalink":"https://xp_ww.gitee.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"操作系统","slug":"操作系统","permalink":"https://xp_ww.gitee.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://xp_ww.gitee.io/tags/nginx/"},{"name":"Docker","slug":"Docker","permalink":"https://xp_ww.gitee.io/tags/Docker/"},{"name":"java","slug":"java","permalink":"https://xp_ww.gitee.io/tags/java/"},{"name":"java八股文","slug":"java八股文","permalink":"https://xp_ww.gitee.io/tags/java%E5%85%AB%E8%82%A1%E6%96%87/"},{"name":"javaSE","slug":"javaSE","permalink":"https://xp_ww.gitee.io/tags/javaSE/"},{"name":"springboot","slug":"springboot","permalink":"https://xp_ww.gitee.io/tags/springboot/"},{"name":"utils","slug":"utils","permalink":"https://xp_ww.gitee.io/tags/utils/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xp_ww.gitee.io/tags/SpringBoot/"},{"name":"SpringSecurity","slug":"SpringSecurity","permalink":"https://xp_ww.gitee.io/tags/SpringSecurity/"},{"name":"Jwt","slug":"Jwt","permalink":"https://xp_ww.gitee.io/tags/Jwt/"},{"name":"算法","slug":"算法","permalink":"https://xp_ww.gitee.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"操作系统","slug":"操作系统","permalink":"https://xp_ww.gitee.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"OS","slug":"OS","permalink":"https://xp_ww.gitee.io/tags/OS/"},{"name":"WelCome","slug":"WelCome","permalink":"https://xp_ww.gitee.io/tags/WelCome/"}]}